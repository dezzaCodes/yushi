{"ast":null,"code":"/**\n * the actions of portfolios stuff\n * dispatch different actions in different case\n * returnErrors send the error massage to the error massge store\n */\nimport axios from 'axios';\nimport { PORTFOLIOS_LOADING, PORTFOLIOS_SUCCESS, PORTFOLIOS_FAILURE, ADD_PORTFOLIO_SUCCESS, ADD_PORTFOLIO_LOADING, ADD_PORTFOLIO_FAILURE, DELETE_PORTFOLIO_LOADING, DELETE_PORTFOLIO_SUCCESS, DELETE_PORTFOLIO_FAILURE, ADD_HOLDING, ADD_HOLDING_LOADING, DELETE_HOLDING, DELETE_HOLDING_LOADING, PORTFOLIOS_PERFORMANCE_LOADING, PORTFOLIOS_PERFORMANCE_SUCCESS, PORTFOLIOS_PERFORMANCE_FAILURE, PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE, PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING, PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS, HOLDING_GROUP_HISTORICAL_FAILURE, HOLDING_GROUP_HISTORICAL_LOADING, HOLDING_GROUP_HISTORICAL_SUCCESS, EDIT_PORTFOLIO_LOADING, EDIT_PORTFOLIO_SUCCESS, EDIT_PORTFOLIO_FAILURE } from './types';\nimport { getConfig } from './auth';\nexport function loadPortfoliosRequest() {\n  let type = PORTFOLIOS_LOADING;\n  return {\n    type\n  };\n}\nexport function loadPortfoliosSuccess(data) {\n  let type = PORTFOLIOS_SUCCESS;\n  return {\n    type,\n    error: null,\n    payload: data\n  };\n}\nexport function loadPortfoliosFailure(err) {\n  let type = PORTFOLIOS_FAILURE;\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type,\n    error: true,\n    payload: {\n      status,\n      message: data\n    }\n  };\n}\nexport function fetchPortfolios() {\n  return function (dispatch, getState) {\n    dispatch(loadPortfoliosRequest());\n    return axios.get('/portfolios', getConfig(getState)).then(res => dispatch(loadPortfoliosSuccess(res.data.portfolios))).catch(err => {\n      if (err.response) {\n        dispatch(loadPortfoliosFailure(err.response));\n      } else if (err.request) {\n        dispatch(loadPortfoliosFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(loadPortfoliosFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}\n/* \n\n    Add portfolio actions\n\n*/\n\nfunction addPortfolioRequest(name) {\n  let type = ADD_PORTFOLIO_LOADING;\n  return {\n    type,\n    name\n  };\n}\n\nfunction addPortfolioSuccess(portfolio) {\n  let type = ADD_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolio,\n    confirmation: `Successfully added portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"!`\n  };\n}\n\nfunction addPortfolioFailure(err) {\n  let type = ADD_PORTFOLIO_FAILURE;\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data\n  };\n}\n\nexport function addNewPortfolio(name) {\n  return function (dispatch, getState) {\n    dispatch(addPortfolioRequest(name));\n    return axios.post('/portfolios', {\n      name\n    }, getConfig(getState)).then(res => dispatch(addPortfolioSuccess(res.data.portfolio))).catch(err => {\n      if (err.response) {\n        dispatch(addPortfolioFailure(err.response));\n      } else if (err.request) {\n        dispatch(addPortfolioFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(addPortfolioFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}\n/* \n\n    Delete portfolio actions\n\n*/\n\nfunction deletePortfolioRequest(portfolioID) {\n  let type = DELETE_PORTFOLIO_LOADING;\n  return {\n    type,\n    portfolioID\n  };\n}\n\nfunction deletePortfolioSuccess(portfolio) {\n  let type = DELETE_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolioID: portfolio.id,\n    confirmation: `Successfully deleted portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"!`\n  };\n}\n\nfunction deletePortfolioFailure(err) {\n  let type = DELETE_PORTFOLIO_FAILURE;\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data\n  };\n}\n\nexport function deletePortfolio(portfolio) {\n  return function (dispatch, getState) {\n    dispatch(deletePortfolioRequest(portfolio.id));\n    return axios.post(`/portfolios/${portfolio.id}/delete`, {}, getConfig(getState)).then(res => dispatch(deletePortfolioSuccess(portfolio))).catch(err => {\n      if (err.response) {\n        dispatch(deletePortfolioFailure(err.response));\n      } else if (err.request) {\n        dispatch(deletePortfolioFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(deletePortfolioFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}\n/* \n\n    Add holdings to portfolio\n\n*/\n\nfunction addHoldingFromPortfolioLoading() {\n  return {\n    type: ADD_HOLDING_LOADING\n  };\n}\n\nexport function addHoldingToPortfolio(portfolio, stock_code, price, quantity, date) {\n  return function (dispatch, getState) {\n    dispatch(addHoldingFromPortfolioLoading());\n    const type = ADD_HOLDING;\n    return axios.post(`/portfolios/${portfolio.id}`, {\n      stock_code,\n      price,\n      quantity,\n      date\n    }, getConfig(getState)).then(res => {\n      const {\n        data: {\n          holding\n        }\n      } = res;\n      dispatch({\n        type,\n        error: null,\n        holding,\n        portfolioID: portfolio.id,\n        confirmation: `Successfully added Holding ${holding.id}: \"${holding.stock_code.toUpperCase()}\" to Portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"`\n      });\n    }).catch(err => {\n      if (err.response.status < 500) {\n        dispatch({\n          type,\n          error: true,\n          confirmationError: err.response.data\n        });\n      } else {\n        console.error(err.response.data);\n        dispatch({\n          type,\n          error: true,\n          confirmationError: 'Internal error: Could not add holding'\n        });\n      }\n    });\n  };\n}\n/* \n\n    Delete holding from portfolio\n\n*/\n\nfunction deleteHoldingFromPortfolioLoading() {\n  return {\n    type: DELETE_HOLDING_LOADING\n  };\n}\n\nexport function deleteHoldingFromPortfolio(holding, portfolio) {\n  const type = DELETE_HOLDING;\n  return function (dispatch, getState) {\n    dispatch(deleteHoldingFromPortfolioLoading());\n    return axios.post(`/portfolios/${portfolio.id}/holdings/${holding.id}/delete`, {}, getConfig(getState)).then(res => {\n      dispatch({\n        type,\n        error: null,\n        holdingID: holding.id,\n        portfolioID: portfolio.id,\n        confirmation: `Successfully deleted Holding ${holding.id}: \"${holding.stock_code.toUpperCase()}\" to Portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"`\n      });\n    }).catch(err => {\n      if (err.response.status < 500) {\n        dispatch({\n          type,\n          error: true,\n          confirmationError: err.response.data\n        });\n      } else {\n        console.error(err.response.data);\n        dispatch({\n          type,\n          error: true,\n          confirmationError: 'Internal error: Could not delete holding'\n        });\n      }\n    });\n  };\n}\n/* \n    PORTFOLIO performance actions\n*/\n\nfunction getPortfoliosPerformanceLoading() {\n  return {\n    type: PORTFOLIOS_PERFORMANCE_LOADING\n  };\n}\n\nfunction getPortfolioPerformanceSuccess(data) {\n  return {\n    type: PORTFOLIOS_PERFORMANCE_SUCCESS,\n    payload: data\n  };\n}\n\nfunction getPortfoliosPerformanceFailure(err) {\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type: PORTFOLIOS_PERFORMANCE_FAILURE,\n    payload: {\n      status,\n      message: data\n    },\n    error: true\n  };\n}\n\nexport function fetchPortfoliosPerformance() {\n  return function (dispatch, getState) {\n    dispatch(getPortfoliosPerformanceLoading());\n    return axios.get('/portfolios/performance', getConfig(getState)).then(res => dispatch(getPortfolioPerformanceSuccess(res.data))).catch(err => {\n      if (err.response) {\n        dispatch(getPortfoliosPerformanceFailure(err.response));\n      } else if (err.request) {\n        dispatch(getPortfoliosPerformanceFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(getPortfoliosPerformanceFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}\n\nfunction getPortfolioHistoricalLoading(portfolioID) {\n  return {\n    type: PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING,\n    portfolioID\n  };\n}\n\nfunction getPortfolioHistoricalSuccess(data) {\n  return {\n    type: PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS,\n    payload: data\n  };\n}\n\nfunction getPortfolioHistoricalFailure(err) {\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type: PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE,\n    payload: {\n      status,\n      message: data\n    },\n    error: true\n  };\n}\n\nexport function fetchPortfolioHistoricalPerformance(portfolioID) {\n  return function (dispatch, getState) {\n    dispatch(getPortfolioHistoricalLoading(portfolioID));\n    return axios.get(`/portfolios/${portfolioID}/historical-performance`, getConfig(getState)).then(res => dispatch(getPortfolioHistoricalSuccess(res.data))).catch(err => {\n      if (err.response) {\n        dispatch(getPortfolioHistoricalFailure(err.response));\n      } else if (err.request) {\n        dispatch(getPortfolioHistoricalFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(getPortfolioHistoricalFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}\nexport function fetchPortfolioHistoricalPerformanceIfNeeded(portfolioID) {\n  return function (dispatch, getState) {\n    /// check if need to fetch...\n    const {\n      portfolios: {\n        historicalPerformance: {\n          data,\n          isFetching\n        }\n      }\n    } = getState();\n\n    if (data[portfolioID] && isFetching === true) {\n      return;\n    }\n\n    dispatch(getPortfolioHistoricalLoading(portfolioID));\n    return axios.get(`/portfolios/${portfolioID}/historical-performance`, getConfig(getState)).then(res => dispatch(getPortfolioHistoricalSuccess(res.data))).catch(err => {\n      if (err.response) {\n        dispatch(getPortfolioHistoricalFailure(err.response));\n      } else if (err.request) {\n        dispatch(getPortfolioHistoricalFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(getPortfolioHistoricalFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}\n\nfunction getHoldingGroupHistoricalLoading(portfolioID) {\n  return {\n    type: HOLDING_GROUP_HISTORICAL_LOADING,\n    portfolioID\n  };\n}\n\nfunction getHoldingGroupHistoricalSuccess(data, portfolioID, code) {\n  return {\n    type: HOLDING_GROUP_HISTORICAL_SUCCESS,\n    payload: data,\n    portfolioID,\n    code\n  };\n}\n\nfunction getHoldingGroupHistoricalFailure(err) {\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type: HOLDING_GROUP_HISTORICAL_FAILURE,\n    payload: {\n      status,\n      message: data\n    },\n    error: true\n  };\n}\n\nexport function fetchHoldingGroupHistoricalPerformance(portfolioID, code) {\n  return function (dispatch, getState) {\n    dispatch(getHoldingGroupHistoricalLoading(portfolioID));\n    return axios.get(`/portfolios/${portfolioID}/holding-group/${code}/historical-performance`, getConfig(getState)).then(res => dispatch(getHoldingGroupHistoricalSuccess(res.data, portfolioID, code))).catch(err => {\n      if (err.response) {\n        dispatch(getHoldingGroupHistoricalFailure(err.response));\n      } else if (err.request) {\n        dispatch(getHoldingGroupHistoricalFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(getHoldingGroupHistoricalFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n} // Edit portfolio\n\nfunction editPortfolioRequest(portfolioID, name) {\n  let type = EDIT_PORTFOLIO_LOADING;\n  return {\n    type,\n    portfolioID,\n    name\n  };\n}\n\nfunction editPortfolioSuccess(portfolio) {\n  let type = EDIT_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolioID: portfolio.id,\n    name: portfolio.name,\n    confirmation: `Successfully edited portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"!`\n  };\n}\n\nfunction editPortfolioFailure(err) {\n  let type = EDIT_PORTFOLIO_FAILURE;\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data\n  };\n}\n\nexport function editPortfolio(name, portfolio) {\n  return function (dispatch, getState) {\n    dispatch(editPortfolioRequest(portfolio.id, name));\n    return axios.post(`/portfolios/${portfolio.id}/edit`, {\n      name\n    }, getConfig(getState)).then(res => dispatch(editPortfolioSuccess(res.data.portfolio))).catch(err => {\n      if (err.response) {\n        dispatch(editPortfolioFailure(err.response));\n      } else if (err.request) {\n        dispatch(editPortfolioFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(editPortfolioFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/actions/portfolios.js"],"names":["axios","PORTFOLIOS_LOADING","PORTFOLIOS_SUCCESS","PORTFOLIOS_FAILURE","ADD_PORTFOLIO_SUCCESS","ADD_PORTFOLIO_LOADING","ADD_PORTFOLIO_FAILURE","DELETE_PORTFOLIO_LOADING","DELETE_PORTFOLIO_SUCCESS","DELETE_PORTFOLIO_FAILURE","ADD_HOLDING","ADD_HOLDING_LOADING","DELETE_HOLDING","DELETE_HOLDING_LOADING","PORTFOLIOS_PERFORMANCE_LOADING","PORTFOLIOS_PERFORMANCE_SUCCESS","PORTFOLIOS_PERFORMANCE_FAILURE","PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE","PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING","PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS","HOLDING_GROUP_HISTORICAL_FAILURE","HOLDING_GROUP_HISTORICAL_LOADING","HOLDING_GROUP_HISTORICAL_SUCCESS","EDIT_PORTFOLIO_LOADING","EDIT_PORTFOLIO_SUCCESS","EDIT_PORTFOLIO_FAILURE","getConfig","loadPortfoliosRequest","type","loadPortfoliosSuccess","data","error","payload","loadPortfoliosFailure","err","status","message","fetchPortfolios","dispatch","getState","get","then","res","portfolios","catch","response","request","addPortfolioRequest","name","addPortfolioSuccess","portfolio","confirmation","id","toUpperCase","addPortfolioFailure","confirmationError","addNewPortfolio","post","deletePortfolioRequest","portfolioID","deletePortfolioSuccess","deletePortfolioFailure","deletePortfolio","addHoldingFromPortfolioLoading","addHoldingToPortfolio","stock_code","price","quantity","date","holding","console","deleteHoldingFromPortfolioLoading","deleteHoldingFromPortfolio","holdingID","getPortfoliosPerformanceLoading","getPortfolioPerformanceSuccess","getPortfoliosPerformanceFailure","fetchPortfoliosPerformance","getPortfolioHistoricalLoading","getPortfolioHistoricalSuccess","getPortfolioHistoricalFailure","fetchPortfolioHistoricalPerformance","fetchPortfolioHistoricalPerformanceIfNeeded","historicalPerformance","isFetching","getHoldingGroupHistoricalLoading","getHoldingGroupHistoricalSuccess","code","getHoldingGroupHistoricalFailure","fetchHoldingGroupHistoricalPerformance","editPortfolioRequest","editPortfolioSuccess","editPortfolioFailure","editPortfolio"],"mappings":"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","sourcesContent":["/**\n * the actions of portfolios stuff\n * dispatch different actions in different case\n * returnErrors send the error massage to the error massge store\n */\n\nimport axios from 'axios';\nimport {\n  PORTFOLIOS_LOADING,\n  PORTFOLIOS_SUCCESS,\n  PORTFOLIOS_FAILURE,\n  ADD_PORTFOLIO_SUCCESS,\n  ADD_PORTFOLIO_LOADING,\n  ADD_PORTFOLIO_FAILURE,\n  DELETE_PORTFOLIO_LOADING,\n  DELETE_PORTFOLIO_SUCCESS,\n  DELETE_PORTFOLIO_FAILURE,\n  ADD_HOLDING,\n  ADD_HOLDING_LOADING,\n  DELETE_HOLDING,\n  DELETE_HOLDING_LOADING,\n  PORTFOLIOS_PERFORMANCE_LOADING,\n  PORTFOLIOS_PERFORMANCE_SUCCESS,\n  PORTFOLIOS_PERFORMANCE_FAILURE,\n  PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE,\n  PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING,\n  PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS,\n  HOLDING_GROUP_HISTORICAL_FAILURE,\n  HOLDING_GROUP_HISTORICAL_LOADING,\n  HOLDING_GROUP_HISTORICAL_SUCCESS,\n  EDIT_PORTFOLIO_LOADING,\n  EDIT_PORTFOLIO_SUCCESS,\n  EDIT_PORTFOLIO_FAILURE,\n} from './types';\n\nimport { getConfig } from './auth';\n\nexport function loadPortfoliosRequest() {\n  let type = PORTFOLIOS_LOADING;\n  return { type };\n}\n\nexport function loadPortfoliosSuccess(data) {\n  let type = PORTFOLIOS_SUCCESS;\n  return {\n    type,\n    error: null,\n    payload: data,\n  };\n}\n\nexport function loadPortfoliosFailure(err) {\n  let type = PORTFOLIOS_FAILURE;\n  const { status, data } = err;\n  return {\n    type,\n    error: true,\n    payload: { status, message: data },\n  };\n}\n\nexport function fetchPortfolios() {\n  return function (dispatch, getState) {\n    dispatch(loadPortfoliosRequest());\n\n    return axios\n      .get('/portfolios', getConfig(getState))\n      .then((res) => dispatch(loadPortfoliosSuccess(res.data.portfolios)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(loadPortfoliosFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            loadPortfoliosFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(loadPortfoliosFailure({ status: 500, data: err.message }));\n        }\n      });\n  };\n}\n\n/* \n\n    Add portfolio actions\n\n*/\n\nfunction addPortfolioRequest(name) {\n  let type = ADD_PORTFOLIO_LOADING;\n  return { type, name };\n}\n\nfunction addPortfolioSuccess(portfolio) {\n  let type = ADD_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolio,\n    confirmation: `Successfully added portfolio ${\n      portfolio.id\n    }: \"${portfolio.name.toUpperCase()}\"!`,\n  };\n}\n\nfunction addPortfolioFailure(err) {\n  let type = ADD_PORTFOLIO_FAILURE;\n  const { status, data } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data,\n  };\n}\n\nexport function addNewPortfolio(name) {\n  return function (dispatch, getState) {\n    dispatch(addPortfolioRequest(name));\n\n    return axios\n      .post('/portfolios', { name }, getConfig(getState))\n      .then((res) => dispatch(addPortfolioSuccess(res.data.portfolio)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(addPortfolioFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            addPortfolioFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(addPortfolioFailure({ status: 500, data: err.message }));\n        }\n      });\n  };\n}\n\n/* \n\n    Delete portfolio actions\n\n*/\n\nfunction deletePortfolioRequest(portfolioID) {\n  let type = DELETE_PORTFOLIO_LOADING;\n  return { type, portfolioID };\n}\n\nfunction deletePortfolioSuccess(portfolio) {\n  let type = DELETE_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolioID: portfolio.id,\n    confirmation: `Successfully deleted portfolio ${\n      portfolio.id\n    }: \"${portfolio.name.toUpperCase()}\"!`,\n  };\n}\n\nfunction deletePortfolioFailure(err) {\n  let type = DELETE_PORTFOLIO_FAILURE;\n  const { status, data } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data,\n  };\n}\n\nexport function deletePortfolio(portfolio) {\n  return function (dispatch, getState) {\n    dispatch(deletePortfolioRequest(portfolio.id));\n    return axios\n      .post(`/portfolios/${portfolio.id}/delete`, {}, getConfig(getState))\n      .then((res) => dispatch(deletePortfolioSuccess(portfolio)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(deletePortfolioFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            deletePortfolioFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(deletePortfolioFailure({ status: 500, data: err.message }));\n        }\n      });\n  };\n}\n\n/* \n\n    Add holdings to portfolio\n\n*/\n\nfunction addHoldingFromPortfolioLoading() {\n  return { type: ADD_HOLDING_LOADING };\n}\n\nexport function addHoldingToPortfolio(\n  portfolio,\n  stock_code,\n  price,\n  quantity,\n  date\n) {\n  return function (dispatch, getState) {\n    dispatch(addHoldingFromPortfolioLoading());\n    const type = ADD_HOLDING;\n    return axios\n      .post(\n        `/portfolios/${portfolio.id}`,\n        { stock_code, price, quantity, date },\n        getConfig(getState)\n      )\n      .then((res) => {\n        const {\n          data: { holding },\n        } = res;\n        dispatch({\n          type,\n          error: null,\n          holding,\n          portfolioID: portfolio.id,\n          confirmation: `Successfully added Holding ${\n            holding.id\n          }: \"${holding.stock_code.toUpperCase()}\" to Portfolio ${\n            portfolio.id\n          }: \"${portfolio.name.toUpperCase()}\"`,\n        });\n      })\n      .catch((err) => {\n        if (err.response.status < 500) {\n          dispatch({ type, error: true, confirmationError: err.response.data });\n        } else {\n          console.error(err.response.data);\n          dispatch({\n            type,\n            error: true,\n            confirmationError: 'Internal error: Could not add holding',\n          });\n        }\n      });\n  };\n}\n\n/* \n\n    Delete holding from portfolio\n\n*/\nfunction deleteHoldingFromPortfolioLoading() {\n  return { type: DELETE_HOLDING_LOADING };\n}\n\nexport function deleteHoldingFromPortfolio(holding, portfolio) {\n  const type = DELETE_HOLDING;\n  return function (dispatch, getState) {\n    dispatch(deleteHoldingFromPortfolioLoading());\n    return axios\n      .post(\n        `/portfolios/${portfolio.id}/holdings/${holding.id}/delete`,\n        {},\n        getConfig(getState)\n      )\n      .then((res) => {\n        dispatch({\n          type,\n          error: null,\n          holdingID: holding.id,\n          portfolioID: portfolio.id,\n          confirmation: `Successfully deleted Holding ${\n            holding.id\n          }: \"${holding.stock_code.toUpperCase()}\" to Portfolio ${\n            portfolio.id\n          }: \"${portfolio.name.toUpperCase()}\"`,\n        });\n      })\n      .catch((err) => {\n        if (err.response.status < 500) {\n          dispatch({ type, error: true, confirmationError: err.response.data });\n        } else {\n          console.error(err.response.data);\n          dispatch({\n            type,\n            error: true,\n            confirmationError: 'Internal error: Could not delete holding',\n          });\n        }\n      });\n  };\n}\n\n/* \n    PORTFOLIO performance actions\n*/\n\nfunction getPortfoliosPerformanceLoading() {\n  return { type: PORTFOLIOS_PERFORMANCE_LOADING };\n}\n\nfunction getPortfolioPerformanceSuccess(data) {\n  return { type: PORTFOLIOS_PERFORMANCE_SUCCESS, payload: data };\n}\n\nfunction getPortfoliosPerformanceFailure(err) {\n  const { status, data } = err;\n  return {\n    type: PORTFOLIOS_PERFORMANCE_FAILURE,\n    payload: { status, message: data },\n    error: true,\n  };\n}\n\nexport function fetchPortfoliosPerformance() {\n  return function (dispatch, getState) {\n    dispatch(getPortfoliosPerformanceLoading());\n\n    return axios\n      .get('/portfolios/performance', getConfig(getState))\n      .then((res) => dispatch(getPortfolioPerformanceSuccess(res.data)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(getPortfoliosPerformanceFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            getPortfoliosPerformanceFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(\n            getPortfoliosPerformanceFailure({ status: 500, data: err.message })\n          );\n        }\n      });\n  };\n}\n\nfunction getPortfolioHistoricalLoading(portfolioID) {\n  return {\n    type: PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING,\n    portfolioID,\n  };\n}\n\nfunction getPortfolioHistoricalSuccess(data) {\n  return { type: PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS, payload: data };\n}\n\nfunction getPortfolioHistoricalFailure(err) {\n  const { status, data } = err;\n  return {\n    type: PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE,\n    payload: { status, message: data },\n    error: true,\n  };\n}\n\nexport function fetchPortfolioHistoricalPerformance(portfolioID) {\n  return function (dispatch, getState) {\n    dispatch(getPortfolioHistoricalLoading(portfolioID));\n\n    return axios\n      .get(\n        `/portfolios/${portfolioID}/historical-performance`,\n        getConfig(getState)\n      )\n      .then((res) => dispatch(getPortfolioHistoricalSuccess(res.data)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(getPortfolioHistoricalFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            getPortfolioHistoricalFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(\n            getPortfolioHistoricalFailure({ status: 500, data: err.message })\n          );\n        }\n      });\n  };\n}\n\nexport function fetchPortfolioHistoricalPerformanceIfNeeded(portfolioID) {\n  return function (dispatch, getState) {\n    /// check if need to fetch...\n    const {\n      portfolios: {\n        historicalPerformance: { data, isFetching },\n      },\n    } = getState();\n\n    if (data[portfolioID] && isFetching === true) {\n      return;\n    }\n\n    dispatch(getPortfolioHistoricalLoading(portfolioID));\n\n    return axios\n      .get(\n        `/portfolios/${portfolioID}/historical-performance`,\n        getConfig(getState)\n      )\n      .then((res) => dispatch(getPortfolioHistoricalSuccess(res.data)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(getPortfolioHistoricalFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            getPortfolioHistoricalFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(\n            getPortfolioHistoricalFailure({ status: 500, data: err.message })\n          );\n        }\n      });\n  };\n}\n\nfunction getHoldingGroupHistoricalLoading(portfolioID) {\n  return {\n    type: HOLDING_GROUP_HISTORICAL_LOADING,\n    portfolioID,\n  };\n}\n\nfunction getHoldingGroupHistoricalSuccess(data, portfolioID, code) {\n  return {\n    type: HOLDING_GROUP_HISTORICAL_SUCCESS,\n    payload: data,\n    portfolioID,\n    code,\n  };\n}\n\nfunction getHoldingGroupHistoricalFailure(err) {\n  const { status, data } = err;\n  return {\n    type: HOLDING_GROUP_HISTORICAL_FAILURE,\n    payload: { status, message: data },\n    error: true,\n  };\n}\n\nexport function fetchHoldingGroupHistoricalPerformance(portfolioID, code) {\n  return function (dispatch, getState) {\n    dispatch(getHoldingGroupHistoricalLoading(portfolioID));\n\n    return axios\n      .get(\n        `/portfolios/${portfolioID}/holding-group/${code}/historical-performance`,\n        getConfig(getState)\n      )\n      .then((res) =>\n        dispatch(getHoldingGroupHistoricalSuccess(res.data, portfolioID, code))\n      )\n      .catch((err) => {\n        if (err.response) {\n          dispatch(getHoldingGroupHistoricalFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            getHoldingGroupHistoricalFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(\n            getHoldingGroupHistoricalFailure({ status: 500, data: err.message })\n          );\n        }\n      });\n  };\n}\n// Edit portfolio\n\nfunction editPortfolioRequest(portfolioID, name) {\n  let type = EDIT_PORTFOLIO_LOADING;\n  return { type, portfolioID, name };\n}\n\nfunction editPortfolioSuccess(portfolio) {\n  let type = EDIT_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolioID: portfolio.id,\n    name: portfolio.name,\n    confirmation: `Successfully edited portfolio ${\n      portfolio.id\n    }: \"${portfolio.name.toUpperCase()}\"!`,\n  };\n}\n\nfunction editPortfolioFailure(err) {\n  let type = EDIT_PORTFOLIO_FAILURE;\n  const { status, data } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data,\n  };\n}\n\nexport function editPortfolio(name, portfolio) {\n  return function (dispatch, getState) {\n    dispatch(editPortfolioRequest(portfolio.id, name));\n    return axios\n      .post(`/portfolios/${portfolio.id}/edit`, { name }, getConfig(getState))\n      .then((res) => dispatch(editPortfolioSuccess(res.data.portfolio)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(editPortfolioFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            editPortfolioFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(editPortfolioFailure({ status: 500, data: err.message }));\n        }\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}