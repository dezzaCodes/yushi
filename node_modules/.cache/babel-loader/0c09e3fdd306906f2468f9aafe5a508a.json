{"ast":null,"code":"/**\n * the actions of company stuff\n * dispatch different actions in different case\n */\nimport { COMPANIES_LOADING, COMPANIES_SUCCESS, COMPANIES_FAILURE } from './types';\nimport axios from 'axios';\nexport function loadCompaniesRequest() {\n  return {\n    type: COMPANIES_LOADING\n  };\n}\nexport function loadCompaniesSuccess(companies) {\n  return {\n    type: COMPANIES_SUCCESS,\n    error: null,\n    payload: companies\n  };\n}\nexport function loadCompaniesFailure(err) {\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type: COMPANIES_FAILURE,\n    error: true,\n    payload: {\n      status,\n      message: data\n    }\n  };\n}\nexport function fetchCompanies() {\n  return function (dispatch) {\n    dispatch(loadCompaniesRequest());\n    return axios.get('/companies').then(res => dispatch(loadCompaniesSuccess(res.data.companies))).catch(error => {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        dispatch(loadCompaniesFailure(error.response));\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        dispatch(loadCompaniesFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        dispatch(loadCompaniesFailure({\n          status: 500,\n          data: error.message\n        }));\n      }\n    });\n  };\n}\n\nfunction shouldFetchCompanies(state) {\n  const {\n    companies: {\n      data,\n      isFetching,\n      error,\n      receivedAt\n    }\n  } = state;\n\n  if (error === null && data.length === 0) {\n    return true;\n  } else if (isFetching) {\n    return false;\n  } else if (receivedAt) {\n    const diff = Date.now() - receivedAt;\n    return diff > 86400000;\n  } else if (data.length > 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function fetchCompaniesIfNeeded() {\n  return (dispatch, getState) => {\n    if (shouldFetchCompanies(getState())) {\n      return dispatch(fetchCompanies());\n    } else {\n      return Promise.resolve();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/actions/companies.js"],"names":["COMPANIES_LOADING","COMPANIES_SUCCESS","COMPANIES_FAILURE","axios","loadCompaniesRequest","type","loadCompaniesSuccess","companies","error","payload","loadCompaniesFailure","err","status","data","message","fetchCompanies","dispatch","get","then","res","catch","response","request","shouldFetchCompanies","state","isFetching","receivedAt","length","diff","Date","now","fetchCompaniesIfNeeded","getState","Promise","resolve"],"mappings":"AAAA;;;;AAKA,SACEA,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,SAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,oBAAT,GAAgC;AACrC,SAAO;AACLC,IAAAA,IAAI,EAAEL;AADD,GAAP;AAGD;AAED,OAAO,SAASM,oBAAT,CAA8BC,SAA9B,EAAyC;AAC9C,SAAO;AACLF,IAAAA,IAAI,EAAEJ,iBADD;AAELO,IAAAA,KAAK,EAAE,IAFF;AAGLC,IAAAA,OAAO,EAAEF;AAHJ,GAAP;AAKD;AAED,OAAO,SAASG,oBAAT,CAA8BC,GAA9B,EAAmC;AACxC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAmBF,GAAzB;AACA,SAAO;AACLN,IAAAA,IAAI,EAAEH,iBADD;AAELM,IAAAA,KAAK,EAAE,IAFF;AAGLC,IAAAA,OAAO,EAAE;AAAEG,MAAAA,MAAF;AAAUE,MAAAA,OAAO,EAAED;AAAnB;AAHJ,GAAP;AAKD;AAED,OAAO,SAASE,cAAT,GAA0B;AAC/B,SAAO,UAAUC,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACZ,oBAAoB,EAArB,CAAR;AAEA,WAAOD,KAAK,CACTc,GADI,CACA,YADA,EAEJC,IAFI,CAEEC,GAAD,IAASH,QAAQ,CAACV,oBAAoB,CAACa,GAAG,CAACN,IAAJ,CAASN,SAAV,CAArB,CAFlB,EAGJa,KAHI,CAGGZ,KAAD,IAAW;AAChB,UAAIA,KAAK,CAACa,QAAV,EAAoB;AAClB;AACA;AACAL,QAAAA,QAAQ,CAACN,oBAAoB,CAACF,KAAK,CAACa,QAAP,CAArB,CAAR;AACD,OAJD,MAIO,IAAIb,KAAK,CAACc,OAAV,EAAmB;AACxB;AACA;AACA;AACAN,QAAAA,QAAQ,CACNN,oBAAoB,CAAC;AACnBE,UAAAA,MAAM,EAAE,GADW;AAEnBC,UAAAA,IAAI,EAAE;AAFa,SAAD,CADd,CAAR;AAMD,OAVM,MAUA;AACL;AACAG,QAAAA,QAAQ,CAACN,oBAAoB,CAAC;AAAEE,UAAAA,MAAM,EAAE,GAAV;AAAeC,UAAAA,IAAI,EAAEL,KAAK,CAACM;AAA3B,SAAD,CAArB,CAAR;AACD;AACF,KAtBI,CAAP;AAuBD,GA1BD;AA2BD;;AAED,SAASS,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,QAAM;AACJjB,IAAAA,SAAS,EAAE;AAAEM,MAAAA,IAAF;AAAQY,MAAAA,UAAR;AAAoBjB,MAAAA,KAApB;AAA2BkB,MAAAA;AAA3B;AADP,MAEFF,KAFJ;;AAGA,MAAIhB,KAAK,KAAK,IAAV,IAAkBK,IAAI,CAACc,MAAL,KAAgB,CAAtC,EAAyC;AACvC,WAAO,IAAP;AACD,GAFD,MAEO,IAAIF,UAAJ,EAAgB;AACrB,WAAO,KAAP;AACD,GAFM,MAEA,IAAIC,UAAJ,EAAgB;AACrB,UAAME,IAAI,GAAGC,IAAI,CAACC,GAAL,KAAaJ,UAA1B;AACA,WAAOE,IAAI,GAAG,QAAd;AACD,GAHM,MAGA,IAAIf,IAAI,CAACc,MAAL,GAAc,CAAlB,EAAqB;AAC1B,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,OAAO,SAASI,sBAAT,GAAkC;AACvC,SAAO,CAACf,QAAD,EAAWgB,QAAX,KAAwB;AAC7B,QAAIT,oBAAoB,CAACS,QAAQ,EAAT,CAAxB,EAAsC;AACpC,aAAOhB,QAAQ,CAACD,cAAc,EAAf,CAAf;AACD,KAFD,MAEO;AACL,aAAOkB,OAAO,CAACC,OAAR,EAAP;AACD;AACF,GAND;AAOD","sourcesContent":["/**\n * the actions of company stuff\n * dispatch different actions in different case\n */\n\nimport {\n  COMPANIES_LOADING,\n  COMPANIES_SUCCESS,\n  COMPANIES_FAILURE,\n} from './types';\nimport axios from 'axios';\n\nexport function loadCompaniesRequest() {\n  return {\n    type: COMPANIES_LOADING,\n  };\n}\n\nexport function loadCompaniesSuccess(companies) {\n  return {\n    type: COMPANIES_SUCCESS,\n    error: null,\n    payload: companies,\n  };\n}\n\nexport function loadCompaniesFailure(err) {\n  const { status, data } = err;\n  return {\n    type: COMPANIES_FAILURE,\n    error: true,\n    payload: { status, message: data },\n  };\n}\n\nexport function fetchCompanies() {\n  return function (dispatch) {\n    dispatch(loadCompaniesRequest());\n\n    return axios\n      .get('/companies')\n      .then((res) => dispatch(loadCompaniesSuccess(res.data.companies)))\n      .catch((error) => {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          dispatch(loadCompaniesFailure(error.response));\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          dispatch(\n            loadCompaniesFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          dispatch(loadCompaniesFailure({ status: 500, data: error.message }));\n        }\n      });\n  };\n}\n\nfunction shouldFetchCompanies(state) {\n  const {\n    companies: { data, isFetching, error, receivedAt },\n  } = state;\n  if (error === null && data.length === 0) {\n    return true;\n  } else if (isFetching) {\n    return false;\n  } else if (receivedAt) {\n    const diff = Date.now() - receivedAt;\n    return diff > 86400000;\n  } else if (data.length > 0) {\n    return false;\n  }\n  return true;\n}\n\nexport function fetchCompaniesIfNeeded() {\n  return (dispatch, getState) => {\n    if (shouldFetchCompanies(getState())) {\n      return dispatch(fetchCompanies());\n    } else {\n      return Promise.resolve();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}