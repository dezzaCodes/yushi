{"ast":null,"code":"/**\n *  set up the store of portoflio \n */\nimport { PORTFOLIOS_LOADING, PORTFOLIOS_SUCCESS, PORTFOLIOS_FAILURE, ADD_PORTFOLIO_LOADING, ADD_PORTFOLIO_SUCCESS, ADD_PORTFOLIO_FAILURE, DELETE_PORTFOLIO_LOADING, DELETE_PORTFOLIO_SUCCESS, DELETE_PORTFOLIO_FAILURE, ADD_HOLDING_LOADING, ADD_HOLDING, DELETE_HOLDING_LOADING, DELETE_HOLDING, PORTFOLIOS_PERFORMANCE_FAILURE, PORTFOLIOS_PERFORMANCE_LOADING, PORTFOLIOS_PERFORMANCE_SUCCESS, PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE, PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING, PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS, HOLDING_GROUP_HISTORICAL_FAILURE, HOLDING_GROUP_HISTORICAL_LOADING, HOLDING_GROUP_HISTORICAL_SUCCESS, EDIT_PORTFOLIO_LOADING, EDIT_PORTFOLIO_SUCCESS, EDIT_PORTFOLIO_FAILURE, LOGOUT_SUCCESS } from '../actions/types';\nconst initialState = {\n  isFetching: false,\n  data: [],\n  error: null,\n  confirmation: null,\n  confirmationError: null\n};\nconst dayPerfInitialState = {\n  isFetching: false,\n  data: {},\n  error: null\n};\nconst histPerfInitialState = {\n  isFetching: false,\n  data: {},\n  error: null,\n  isFetchingGroup: false\n};\n\nfunction dayPerformance(state = dayPerfInitialState, action) {\n  switch (action.type) {\n    case PORTFOLIOS_PERFORMANCE_LOADING:\n      return { ...state,\n        isFetching: true\n      };\n\n    case PORTFOLIOS_PERFORMANCE_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        data: action.payload,\n        error: null,\n        receivedAt: Date.now()\n      };\n\n    case PORTFOLIOS_PERFORMANCE_FAILURE:\n      return { ...state,\n        isFetching: false,\n        data: {},\n        error: action.payload,\n        receivedAt: Date.now()\n      };\n\n    case LOGOUT_SUCCESS:\n      return dayPerfInitialState;\n\n    default:\n      return state;\n  }\n}\n\nfunction historicalPerformance(state = histPerfInitialState, action) {\n  switch (action.type) {\n    case PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING:\n      return { ...state,\n        isFetching: true,\n        isFetchingGroup: true\n      };\n\n    case PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS:\n      const {\n        portfolio_id\n      } = action.payload;\n      const {\n        data\n      } = state;\n      data[portfolio_id] = action.payload;\n      return { ...state,\n        isFetching: false,\n        data: { ...data\n        },\n        error: null,\n        isFetchingGroup: false,\n        receivedAt: Date.now()\n      };\n\n    case PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE:\n      return { ...state,\n        isFetching: false,\n        isFetchingGroup: false,\n        error: action.payload,\n        receivedAt: Date.now()\n      };\n\n    case HOLDING_GROUP_HISTORICAL_LOADING:\n      return { ...state,\n        isFetchingGroup: true\n      };\n\n    case HOLDING_GROUP_HISTORICAL_SUCCESS:\n      const {\n        portfolioID,\n        code,\n        payload\n      } = action;\n      const newData = { ...state.data\n      };\n      const newHoldingPerformance = newData[portfolioID].holding_performance.filter(h => h.code !== code);\n      newHoldingPerformance.push(payload);\n      newData[portfolioID].holding_performance = newHoldingPerformance;\n      return { ...state,\n        isFetchingGroup: false,\n        data: { ...newData\n        },\n        error: null,\n        receivedAt: Date.now()\n      };\n\n    case HOLDING_GROUP_HISTORICAL_FAILURE:\n      return { ...state,\n        isFetchingGroup: false,\n        error: action.payload,\n        receivedAt: Date.now()\n      };\n\n    case LOGOUT_SUCCESS:\n      return histPerfInitialState;\n\n    default:\n      return state;\n  }\n}\n\nfunction fetchingPortfolios(state = initialState, action) {\n  switch (action.type) {\n    case PORTFOLIOS_LOADING:\n      return Object.assign({}, state, {\n        isFetching: true\n      });\n\n    case PORTFOLIOS_SUCCESS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: action.payload,\n        error: null,\n        receivedAt: Date.now()\n      });\n\n    case PORTFOLIOS_FAILURE:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: [],\n        error: action.payload,\n        receivedAt: Date.now()\n      });\n\n    case ADD_PORTFOLIO_LOADING:\n      return Object.assign({}, state, {\n        processingAdd: true,\n        confirmation: null,\n        confirmationError: null\n      });\n\n    case ADD_PORTFOLIO_SUCCESS:\n      return Object.assign({}, state, {\n        processingAdd: false,\n        data: [...state.data, action.portfolio],\n        error: null,\n        confirmation: action.confirmation,\n        receivedAt: Date.now()\n      });\n\n    case ADD_PORTFOLIO_FAILURE:\n      return Object.assign({}, state, {\n        processingAdd: false,\n        confirmation: null,\n        confirmationError: action.confirmationError,\n        receivedAt: Date.now()\n      });\n\n    case EDIT_PORTFOLIO_LOADING:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: null\n      });\n\n    case EDIT_PORTFOLIO_SUCCESS:\n      var newEntry = state.data.find(data => data.id === action.portfolioID);\n      var oldEntry = state.data.filter(data => data.id !== action.portfolioID);\n      newEntry.name = action.name;\n      var input = [...oldEntry, newEntry];\n      return Object.assign({}, state, {\n        data: input,\n        error: null,\n        confirmation: action.confirmation,\n        receivedAt: Date.now()\n      });\n\n    case EDIT_PORTFOLIO_FAILURE:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: action.confirmationError,\n        receivedAt: Date.now()\n      });\n\n    case DELETE_PORTFOLIO_LOADING:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: null\n      });\n\n    case DELETE_PORTFOLIO_SUCCESS:\n      return Object.assign({}, state, {\n        data: state.data.filter(data => data.id !== action.portfolioID),\n        confirmation: action.confirmation,\n        confirmationError: null,\n        receivedAt: Date.now()\n      });\n\n    case DELETE_PORTFOLIO_FAILURE:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: action.confirmationError,\n        receivedAt: Date.now()\n      });\n\n    case ADD_HOLDING_LOADING:\n      return Object.assign({}, state, {\n        processingAdd: true,\n        confirmation: null,\n        confirmationError: null\n      });\n\n    case ADD_HOLDING:\n      if (action.error) {\n        return Object.assign({}, state, {\n          processingAdd: false,\n          confirmation: null,\n          confirmationError: action.confirmationError,\n          receivedAt: Date.now()\n        });\n      } else {\n        return Object.assign({}, state, {\n          processingAdd: false,\n          data: state.data.map(p => p.id === action.portfolioID ? { ...p,\n            holdings: [...p.holdings, action.holding]\n          } : p),\n          confirmation: action.confirmation,\n          confirmationError: null,\n          receivedAt: Date.now()\n        });\n      }\n\n    case DELETE_HOLDING_LOADING:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: null\n      });\n\n    case DELETE_HOLDING:\n      if (action.error) {\n        return Object.assign({}, state, {\n          confirmation: null,\n          confirmationError: action.confirmationError,\n          receivedAt: Date.now()\n        });\n      } else {\n        return Object.assign({}, state, {\n          data: state.data.map(p => p.id === action.portfolioID ? { ...p,\n            holdings: p.holdings.filter(h => h.id !== action.holdingID)\n          } : p),\n          confirmation: action.confirmation,\n          confirmationError: null,\n          receivedAt: Date.now()\n        });\n      }\n\n    case LOGOUT_SUCCESS:\n      return initialState;\n\n    default:\n      return state;\n  }\n}\n\nexport default function portfolios(state = initialState, action) {\n  if (action.type === LOGOUT_SUCCESS) {\n    return { ...fetchingPortfolios(state, action),\n      dayPerformance: dayPerformance(state.dayPerformance, action),\n      historicalPerformance: historicalPerformance(state.historicalPerformance, action)\n    };\n  }\n\n  return { ...state,\n    ...fetchingPortfolios(state, action),\n    dayPerformance: dayPerformance(state.dayPerformance, action),\n    historicalPerformance: historicalPerformance(state.historicalPerformance, action)\n  };\n}","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/reducers/portfolios.js"],"names":["PORTFOLIOS_LOADING","PORTFOLIOS_SUCCESS","PORTFOLIOS_FAILURE","ADD_PORTFOLIO_LOADING","ADD_PORTFOLIO_SUCCESS","ADD_PORTFOLIO_FAILURE","DELETE_PORTFOLIO_LOADING","DELETE_PORTFOLIO_SUCCESS","DELETE_PORTFOLIO_FAILURE","ADD_HOLDING_LOADING","ADD_HOLDING","DELETE_HOLDING_LOADING","DELETE_HOLDING","PORTFOLIOS_PERFORMANCE_FAILURE","PORTFOLIOS_PERFORMANCE_LOADING","PORTFOLIOS_PERFORMANCE_SUCCESS","PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE","PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING","PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS","HOLDING_GROUP_HISTORICAL_FAILURE","HOLDING_GROUP_HISTORICAL_LOADING","HOLDING_GROUP_HISTORICAL_SUCCESS","EDIT_PORTFOLIO_LOADING","EDIT_PORTFOLIO_SUCCESS","EDIT_PORTFOLIO_FAILURE","LOGOUT_SUCCESS","initialState","isFetching","data","error","confirmation","confirmationError","dayPerfInitialState","histPerfInitialState","isFetchingGroup","dayPerformance","state","action","type","payload","receivedAt","Date","now","historicalPerformance","portfolio_id","portfolioID","code","newData","newHoldingPerformance","holding_performance","filter","h","push","fetchingPortfolios","Object","assign","processingAdd","portfolio","newEntry","find","id","oldEntry","name","input","map","p","holdings","holding","holdingID","portfolios"],"mappings":"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","sourcesContent":["/**\n *  set up the store of portoflio \n */\nimport {\n  PORTFOLIOS_LOADING,\n  PORTFOLIOS_SUCCESS,\n  PORTFOLIOS_FAILURE,\n  ADD_PORTFOLIO_LOADING,\n  ADD_PORTFOLIO_SUCCESS,\n  ADD_PORTFOLIO_FAILURE,\n  DELETE_PORTFOLIO_LOADING,\n  DELETE_PORTFOLIO_SUCCESS,\n  DELETE_PORTFOLIO_FAILURE,\n  ADD_HOLDING_LOADING,\n  ADD_HOLDING,\n  DELETE_HOLDING_LOADING,\n  DELETE_HOLDING,\n  PORTFOLIOS_PERFORMANCE_FAILURE,\n  PORTFOLIOS_PERFORMANCE_LOADING,\n  PORTFOLIOS_PERFORMANCE_SUCCESS,\n  PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE,\n  PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING,\n  PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS,\n  HOLDING_GROUP_HISTORICAL_FAILURE,\n  HOLDING_GROUP_HISTORICAL_LOADING,\n  HOLDING_GROUP_HISTORICAL_SUCCESS,\n  EDIT_PORTFOLIO_LOADING,\n  EDIT_PORTFOLIO_SUCCESS,\n  EDIT_PORTFOLIO_FAILURE,\n  LOGOUT_SUCCESS,\n} from '../actions/types';\n\nconst initialState = {\n  isFetching: false,\n  data: [],\n  error: null,\n  confirmation: null,\n  confirmationError: null,\n};\n\nconst dayPerfInitialState = { isFetching: false, data: {}, error: null };\nconst histPerfInitialState = {\n  isFetching: false,\n  data: {},\n  error: null,\n  isFetchingGroup: false,\n};\n\nfunction dayPerformance(state = dayPerfInitialState, action) {\n  switch (action.type) {\n    case PORTFOLIOS_PERFORMANCE_LOADING:\n      return { ...state, isFetching: true };\n    case PORTFOLIOS_PERFORMANCE_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        data: action.payload,\n        error: null,\n        receivedAt: Date.now(),\n      };\n    case PORTFOLIOS_PERFORMANCE_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        data: {},\n        error: action.payload,\n        receivedAt: Date.now(),\n      };\n    case LOGOUT_SUCCESS:\n      return dayPerfInitialState;\n    default:\n      return state;\n  }\n}\n\nfunction historicalPerformance(state = histPerfInitialState, action) {\n  switch (action.type) {\n    case PORTFOLIO_HISTORICAL_PERFORMANCE_LOADING:\n      return { ...state, isFetching: true, isFetchingGroup: true };\n    case PORTFOLIO_HISTORICAL_PERFORMANCE_SUCCESS:\n      const { portfolio_id } = action.payload;\n      const { data } = state;\n      data[portfolio_id] = action.payload;\n      return {\n        ...state,\n        isFetching: false,\n        data: { ...data },\n        error: null,\n        isFetchingGroup: false,\n        receivedAt: Date.now(),\n      };\n    case PORTFOLIO_HISTORICAL_PERFORMANCE_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        isFetchingGroup: false,\n        error: action.payload,\n        receivedAt: Date.now(),\n      };\n    case HOLDING_GROUP_HISTORICAL_LOADING:\n      return { ...state, isFetchingGroup: true };\n    case HOLDING_GROUP_HISTORICAL_SUCCESS:\n      const { portfolioID, code, payload } = action;\n      const newData = { ...state.data };\n      const newHoldingPerformance = newData[\n        portfolioID\n      ].holding_performance.filter((h) => h.code !== code);\n      newHoldingPerformance.push(payload);\n      newData[portfolioID].holding_performance = newHoldingPerformance;\n      return {\n        ...state,\n        isFetchingGroup: false,\n        data: { ...newData },\n        error: null,\n        receivedAt: Date.now(),\n      };\n    case HOLDING_GROUP_HISTORICAL_FAILURE:\n      return {\n        ...state,\n        isFetchingGroup: false,\n        error: action.payload,\n        receivedAt: Date.now(),\n      };\n    case LOGOUT_SUCCESS:\n      return histPerfInitialState;\n    default:\n      return state;\n  }\n}\n\nfunction fetchingPortfolios(state = initialState, action) {\n  switch (action.type) {\n    case PORTFOLIOS_LOADING:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case PORTFOLIOS_SUCCESS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: action.payload,\n        error: null,\n        receivedAt: Date.now(),\n      });\n    case PORTFOLIOS_FAILURE:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: [],\n        error: action.payload,\n        receivedAt: Date.now(),\n      });\n    case ADD_PORTFOLIO_LOADING:\n      return Object.assign({}, state, {\n        processingAdd: true,\n        confirmation: null,\n        confirmationError: null,\n      });\n    case ADD_PORTFOLIO_SUCCESS:\n      return Object.assign({}, state, {\n        processingAdd: false,\n        data: [...state.data, action.portfolio],\n        error: null,\n        confirmation: action.confirmation,\n        receivedAt: Date.now(),\n      });\n    case ADD_PORTFOLIO_FAILURE:\n      return Object.assign({}, state, {\n        processingAdd: false,\n        confirmation: null,\n        confirmationError: action.confirmationError,\n        receivedAt: Date.now(),\n      });\n    case EDIT_PORTFOLIO_LOADING:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: null,\n      });\n    case EDIT_PORTFOLIO_SUCCESS:\n      var newEntry = state.data.find((data) => data.id === action.portfolioID);\n      var oldEntry = state.data.filter(\n        (data) => data.id !== action.portfolioID\n      );\n      newEntry.name = action.name;\n      var input = [...oldEntry, newEntry];\n\n      return Object.assign({}, state, {\n        data: input,\n        error: null,\n        confirmation: action.confirmation,\n        receivedAt: Date.now(),\n      });\n    case EDIT_PORTFOLIO_FAILURE:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: action.confirmationError,\n        receivedAt: Date.now(),\n      });\n    case DELETE_PORTFOLIO_LOADING:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: null,\n      });\n    case DELETE_PORTFOLIO_SUCCESS:\n      return Object.assign({}, state, {\n        data: state.data.filter((data) => data.id !== action.portfolioID),\n        confirmation: action.confirmation,\n        confirmationError: null,\n        receivedAt: Date.now(),\n      });\n    case DELETE_PORTFOLIO_FAILURE:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: action.confirmationError,\n        receivedAt: Date.now(),\n      });\n    case ADD_HOLDING_LOADING:\n      return Object.assign({}, state, {\n        processingAdd: true,\n        confirmation: null,\n        confirmationError: null,\n      });\n    case ADD_HOLDING:\n      if (action.error) {\n        return Object.assign({}, state, {\n          processingAdd: false,\n          confirmation: null,\n          confirmationError: action.confirmationError,\n          receivedAt: Date.now(),\n        });\n      } else {\n        return Object.assign({}, state, {\n          processingAdd: false,\n          data: state.data.map((p) =>\n            p.id === action.portfolioID\n              ? { ...p, holdings: [...p.holdings, action.holding] }\n              : p\n          ),\n          confirmation: action.confirmation,\n          confirmationError: null,\n          receivedAt: Date.now(),\n        });\n      }\n    case DELETE_HOLDING_LOADING:\n      return Object.assign({}, state, {\n        confirmation: null,\n        confirmationError: null,\n      });\n    case DELETE_HOLDING:\n      if (action.error) {\n        return Object.assign({}, state, {\n          confirmation: null,\n          confirmationError: action.confirmationError,\n          receivedAt: Date.now(),\n        });\n      } else {\n        return Object.assign({}, state, {\n          data: state.data.map((p) =>\n            p.id === action.portfolioID\n              ? {\n                  ...p,\n                  holdings: p.holdings.filter((h) => h.id !== action.holdingID),\n                }\n              : p\n          ),\n          confirmation: action.confirmation,\n          confirmationError: null,\n          receivedAt: Date.now(),\n        });\n      }\n    case LOGOUT_SUCCESS:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nexport default function portfolios(state = initialState, action) {\n  if (action.type === LOGOUT_SUCCESS) {\n    return {\n      ...fetchingPortfolios(state, action),\n      dayPerformance: dayPerformance(state.dayPerformance, action),\n      historicalPerformance: historicalPerformance(\n        state.historicalPerformance,\n        action\n      ),\n    };\n  }\n  return {\n    ...state,\n    ...fetchingPortfolios(state, action),\n    dayPerformance: dayPerformance(state.dayPerformance, action),\n    historicalPerformance: historicalPerformance(\n      state.historicalPerformance,\n      action\n    ),\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}