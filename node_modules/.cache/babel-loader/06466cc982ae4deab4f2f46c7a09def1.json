{"ast":null,"code":"/**\n * the actions of game Portoflio stuff\n * dispatch different actions in different case\n * getConfig would add the headers for post\n */\nimport axios from 'axios';\nimport { GAME_PORTFOLIOS_LOADING, GAME_PORTFOLIOS_SUCCESS, GAME_PORTFOLIOS_FAILURE, GAME_ADD_PORTFOLIO_SUCCESS, GAME_ADD_PORTFOLIO_LOADING, GAME_ADD_PORTFOLIO_FAILURE, GAME_DELETE_PORTFOLIO_LOADING, GAME_DELETE_PORTFOLIO_SUCCESS, GAME_DELETE_PORTFOLIO_FAILURE, GAME_ADD_HOLDING, GAME_ADD_HOLDING_LOADING, GAME_DELETE_HOLDING, GAME_DELETE_HOLDING_LOADING, GAME_SELL_HOLDING_LOADING, GAME_SELL_HOLDING, GAME_RESET } from './types';\nimport { getConfig } from './auth';\nexport function loadGamePortfoliosRequest() {\n  let type = GAME_PORTFOLIOS_LOADING;\n  return {\n    type\n  };\n}\nexport function loadGamePortfoliosSuccess(data) {\n  let type = GAME_PORTFOLIOS_SUCCESS;\n  return {\n    type,\n    error: null,\n    payload: data\n  };\n}\nexport function loadGamePortfoliosFailure(err) {\n  let type = GAME_PORTFOLIOS_FAILURE;\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type,\n    error: true,\n    payload: {\n      status,\n      message: data\n    }\n  };\n}\nexport function fetchPortfolios() {\n  return function (dispatch, getState) {\n    dispatch(loadGamePortfoliosRequest());\n    return axios.get('/portfolios', getConfig(getState)).then(res => dispatch(loadGamePortfoliosSuccess(res.data.game_portfolio))).catch(err => {\n      if (err.response) {\n        dispatch(loadGamePortfoliosFailure(err.response));\n      } else if (err.request) {\n        dispatch(loadGamePortfoliosFailure({\n          status: 400,\n          data: 'Request was made but no response was received.'\n        }));\n      } else {\n        dispatch(loadGamePortfoliosFailure({\n          status: 500,\n          data: err.message\n        }));\n      }\n    });\n  };\n}\n/* \n\n    Add portfolio actions\n\n*/\n\nfunction addPortfolioRequest(name) {\n  let type = GAME_ADD_PORTFOLIO_LOADING;\n  return {\n    type,\n    name\n  };\n}\n\nfunction addPortfolioSuccess(portfolio) {\n  let type = GAME_ADD_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolio,\n    confirmation: `Successfully added portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"!`\n  };\n}\n\nfunction addPortfolioFailure(err) {\n  let type = GAME_ADD_PORTFOLIO_FAILURE;\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data\n  };\n}\n\nexport function addNewPortfolio(name) {\n  return function (dispatch, getState) {\n    dispatch(addPortfolioRequest(name));\n    return axios.post('/gamePortfolios', {\n      name\n    }, getConfig(getState)).then(res => dispatch(addPortfolioSuccess(res.data.portfolio))).catch(err => dispatch(addPortfolioFailure(err.response)));\n  };\n}\n/* \n\n    Delete portfolio actions\n\n*/\n\nfunction deletePortfolioRequest(portfolioID) {\n  let type = GAME_DELETE_PORTFOLIO_LOADING;\n  return {\n    type,\n    portfolioID\n  };\n}\n\nfunction deletePortfolioSuccess(portfolio) {\n  let type = GAME_DELETE_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolioID: portfolio.id,\n    confirmation: `Successfully deleted portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"!`\n  };\n}\n\nfunction deletePortfolioFailure(err) {\n  let type = GAME_DELETE_PORTFOLIO_FAILURE;\n  const {\n    status,\n    data\n  } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data\n  };\n}\n\nexport function deletePortfolio(portfolio) {\n  return function (dispatch, getState) {\n    dispatch(deletePortfolioRequest(portfolio.id));\n    return axios.post(`/gamePortfolios/${portfolio.id}/delete`, {}, getConfig(getState)).then(res => dispatch(deletePortfolioSuccess(portfolio))).catch(err => dispatch(deletePortfolioFailure(err.response)));\n  };\n}\n/* \n\n    Add holdings to portfolio\n\n*/\n\nfunction addGameHoldingLoading() {\n  return {\n    type: GAME_ADD_HOLDING_LOADING\n  };\n}\n\nexport function addGameHolding(portfolio, stock_code, quantity) {\n  return function (dispatch, getState) {\n    dispatch(addGameHoldingLoading());\n    const type = GAME_ADD_HOLDING;\n    return axios.post(`/game/add`, {\n      stock_code,\n      quantity\n    }, getConfig(getState)).then(res => {\n      const {\n        data: {\n          game_holding\n        }\n      } = res;\n      dispatch({\n        type,\n        error: null,\n        game_holding,\n        confirmation: `Successfully purchased ${quantity} units of \"${game_holding.stock_code.toUpperCase()}\"`\n      });\n    }).catch(err => {\n      if (err.response.status < 500) {\n        dispatch({\n          type,\n          error: true,\n          confirmationError: err.response.data\n        });\n      } else {\n        console.error(err.response.data);\n        dispatch({\n          type,\n          error: true,\n          confirmationError: 'Internal error: Could not add holding'\n        });\n      }\n    });\n  };\n}\n/* \n\n    Delete holding from portfolio\n\n*/\n\nfunction deleteHoldingFromPortfolioLoading() {\n  return {\n    type: GAME_DELETE_HOLDING_LOADING\n  };\n}\n\nexport function deleteHoldingFromPortfolio(holding, portfolio) {\n  const type = GAME_DELETE_HOLDING;\n  return function (dispatch, getState) {\n    dispatch(deleteHoldingFromPortfolioLoading());\n    return axios.post(`/gamePortfolios/${portfolio.id}/holdings/${holding.id}/delete`, {}, getConfig(getState)).then(res => {\n      dispatch({\n        type,\n        error: null,\n        holdingID: holding.id,\n        portfolioID: portfolio.id,\n        confirmation: `Successfully deleted Holding ${holding.id}: \"${holding.stock_code.toUpperCase()}\" to Portfolio ${portfolio.id}: \"${portfolio.name.toUpperCase()}\"`\n      });\n    }).catch(err => {\n      if (err.response.status < 500) {\n        dispatch({\n          type,\n          error: true,\n          confirmationError: err.response.data\n        });\n      } else {\n        console.error(err.response.data);\n        dispatch({\n          type,\n          error: true,\n          confirmationError: 'Internal error: Could not delete holding'\n        });\n      }\n    });\n  };\n}\n\nfunction sellGameHoldingLoading() {\n  return {\n    type: GAME_SELL_HOLDING_LOADING\n  };\n}\n\nexport function sellGameHolding(id, quantity) {\n  return function (dispatch, getState) {\n    dispatch(sellGameHoldingLoading());\n    const type = GAME_SELL_HOLDING;\n    return axios.post(`/game/sell`, {\n      id,\n      quantity\n    }, getConfig(getState)).then(res => {\n      const {\n        data: {\n          game_holding\n        }\n      } = res;\n      dispatch({\n        type,\n        error: null,\n        game_holding,\n        confirmation: `Successfully sold ${quantity} units of \"${game_holding.stock_code.toUpperCase()}\"`\n      });\n    }).catch(err => {\n      if (err.response.status < 500) {\n        dispatch({\n          type,\n          error: true,\n          confirmationError: err.response.data\n        });\n      } else {\n        console.error(err.response.data);\n        dispatch({\n          type,\n          error: true,\n          confirmationError: 'Internal error: Could not add holding'\n        });\n      }\n    });\n  };\n}\nexport function resetGame() {\n  return {\n    type: GAME_RESET\n  };\n}","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/actions/gamePortfolio.js"],"names":["axios","GAME_PORTFOLIOS_LOADING","GAME_PORTFOLIOS_SUCCESS","GAME_PORTFOLIOS_FAILURE","GAME_ADD_PORTFOLIO_SUCCESS","GAME_ADD_PORTFOLIO_LOADING","GAME_ADD_PORTFOLIO_FAILURE","GAME_DELETE_PORTFOLIO_LOADING","GAME_DELETE_PORTFOLIO_SUCCESS","GAME_DELETE_PORTFOLIO_FAILURE","GAME_ADD_HOLDING","GAME_ADD_HOLDING_LOADING","GAME_DELETE_HOLDING","GAME_DELETE_HOLDING_LOADING","GAME_SELL_HOLDING_LOADING","GAME_SELL_HOLDING","GAME_RESET","getConfig","loadGamePortfoliosRequest","type","loadGamePortfoliosSuccess","data","error","payload","loadGamePortfoliosFailure","err","status","message","fetchPortfolios","dispatch","getState","get","then","res","game_portfolio","catch","response","request","addPortfolioRequest","name","addPortfolioSuccess","portfolio","confirmation","id","toUpperCase","addPortfolioFailure","confirmationError","addNewPortfolio","post","deletePortfolioRequest","portfolioID","deletePortfolioSuccess","deletePortfolioFailure","deletePortfolio","addGameHoldingLoading","addGameHolding","stock_code","quantity","game_holding","console","deleteHoldingFromPortfolioLoading","deleteHoldingFromPortfolio","holding","holdingID","sellGameHoldingLoading","sellGameHolding","resetGame"],"mappings":"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","sourcesContent":["/**\n * the actions of game Portoflio stuff\n * dispatch different actions in different case\n * getConfig would add the headers for post\n */\n\nimport axios from 'axios';\nimport {\n  GAME_PORTFOLIOS_LOADING,\n  GAME_PORTFOLIOS_SUCCESS,\n  GAME_PORTFOLIOS_FAILURE,\n  GAME_ADD_PORTFOLIO_SUCCESS,\n  GAME_ADD_PORTFOLIO_LOADING,\n  GAME_ADD_PORTFOLIO_FAILURE,\n  GAME_DELETE_PORTFOLIO_LOADING,\n  GAME_DELETE_PORTFOLIO_SUCCESS,\n  GAME_DELETE_PORTFOLIO_FAILURE,\n  GAME_ADD_HOLDING,\n  GAME_ADD_HOLDING_LOADING,\n  GAME_DELETE_HOLDING,\n  GAME_DELETE_HOLDING_LOADING,\n  GAME_SELL_HOLDING_LOADING,\n  GAME_SELL_HOLDING,\n  GAME_RESET,\n} from './types';\nimport { getConfig } from './auth';\n\nexport function loadGamePortfoliosRequest() {\n  let type = GAME_PORTFOLIOS_LOADING;\n  return { type };\n}\n\nexport function loadGamePortfoliosSuccess(data) {\n  let type = GAME_PORTFOLIOS_SUCCESS;\n  return {\n    type,\n    error: null,\n    payload: data\n  };\n}\n\nexport function loadGamePortfoliosFailure(err) {\n  let type = GAME_PORTFOLIOS_FAILURE;\n  const { status, data } = err;\n  return {\n    type,\n    error: true,\n    payload: { status, message: data }\n  };\n}\n\nexport function fetchPortfolios() {\n  return function(dispatch, getState) {\n    dispatch(loadGamePortfoliosRequest());\n\n    return axios\n            .get('/portfolios', getConfig(getState))\n      .then((res) => dispatch(loadGamePortfoliosSuccess(res.data.game_portfolio)))\n      .catch((err) => {\n        if (err.response) {\n          dispatch(loadGamePortfoliosFailure(err.response));\n        } else if (err.request) {\n          dispatch(\n            loadGamePortfoliosFailure({\n              status: 400,\n              data: 'Request was made but no response was received.',\n            })\n          );\n        } else {\n          dispatch(loadGamePortfoliosFailure({ status: 500, data: err.message }));\n        }\n      });\n  };\n}\n\n/* \n\n    Add portfolio actions\n\n*/\n\nfunction addPortfolioRequest(name) {\n  let type = GAME_ADD_PORTFOLIO_LOADING;\n  return { type, name };\n}\n\nfunction addPortfolioSuccess(portfolio) {\n  let type = GAME_ADD_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolio,\n    confirmation: `Successfully added portfolio ${\n      portfolio.id\n    }: \"${portfolio.name.toUpperCase()}\"!`\n  };\n}\n\nfunction addPortfolioFailure(err) {\n  let type = GAME_ADD_PORTFOLIO_FAILURE;\n  const { status, data } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data\n  };\n}\n\nexport function addNewPortfolio(name) {\n  return function(dispatch, getState) {\n    dispatch(addPortfolioRequest(name));\n\n    return axios\n      .post('/gamePortfolios', { name }, getConfig(getState))\n      .then(res => dispatch(addPortfolioSuccess(res.data.portfolio)))\n      .catch(err => dispatch(addPortfolioFailure(err.response)));\n  };\n}\n\n/* \n\n    Delete portfolio actions\n\n*/\n\nfunction deletePortfolioRequest(portfolioID) {\n  let type = GAME_DELETE_PORTFOLIO_LOADING;\n  return { type, portfolioID };\n}\n\nfunction deletePortfolioSuccess(portfolio) {\n  let type = GAME_DELETE_PORTFOLIO_SUCCESS;\n  return {\n    type,\n    error: null,\n    portfolioID: portfolio.id,\n    confirmation: `Successfully deleted portfolio ${\n      portfolio.id\n    }: \"${portfolio.name.toUpperCase()}\"!`\n  };\n}\n\nfunction deletePortfolioFailure(err) {\n  let type = GAME_DELETE_PORTFOLIO_FAILURE;\n  const { status, data } = err;\n  return {\n    type,\n    error: true,\n    confirmationError: data\n  };\n}\n\nexport function deletePortfolio(portfolio) {\n  return function(dispatch, getState) {\n    dispatch(deletePortfolioRequest(portfolio.id));\n    return axios\n      .post(`/gamePortfolios/${portfolio.id}/delete`, {}, getConfig(getState))\n      .then(res => dispatch(deletePortfolioSuccess(portfolio)))\n      .catch(err => dispatch(deletePortfolioFailure(err.response)));\n  };\n}\n\n/* \n\n    Add holdings to portfolio\n\n*/\n\nfunction addGameHoldingLoading() {\n  return { type: GAME_ADD_HOLDING_LOADING };\n}\n\nexport function addGameHolding(\n  portfolio,\n  stock_code,\n  quantity\n) {\n  return function(dispatch, getState) {\n    dispatch(addGameHoldingLoading());\n    const type = GAME_ADD_HOLDING;\n    return axios\n      .post(\n        `/game/add`,\n        { stock_code, quantity },\n        getConfig(getState)\n      )\n      .then(res => {\n        const {\n          data: { game_holding }\n        } = res;\n        dispatch({\n          type,\n          error: null,\n          game_holding,\n          confirmation: `Successfully purchased ${\n            quantity\n          } units of \"${game_holding.stock_code.toUpperCase()}\"`\n        });\n      })\n      .catch(err => {\n        if (err.response.status < 500) {\n          dispatch({ type, error: true, confirmationError: err.response.data });\n        } else {\n          console.error(err.response.data);\n          dispatch({\n            type,\n            error: true,\n            confirmationError: 'Internal error: Could not add holding'\n          });\n        }\n      });\n  };\n}\n\n/* \n\n    Delete holding from portfolio\n\n*/\nfunction deleteHoldingFromPortfolioLoading() {\n  return { type:   GAME_DELETE_HOLDING_LOADING };\n}\n\nexport function deleteHoldingFromPortfolio(holding, portfolio) {\n  const type = GAME_DELETE_HOLDING;\n  return function(dispatch, getState) {\n    dispatch(deleteHoldingFromPortfolioLoading());\n    return axios\n      .post(\n        `/gamePortfolios/${portfolio.id}/holdings/${holding.id}/delete`,\n        {},\n        getConfig(getState)\n      )\n      .then(res => {\n        dispatch({\n          type,\n          error: null,\n          holdingID: holding.id,\n          portfolioID: portfolio.id,\n          confirmation: `Successfully deleted Holding ${\n            holding.id\n          }: \"${holding.stock_code.toUpperCase()}\" to Portfolio ${\n            portfolio.id\n          }: \"${portfolio.name.toUpperCase()}\"`\n        });\n      })\n      .catch(err => {\n        if (err.response.status < 500) {\n          dispatch({ type, error: true, confirmationError: err.response.data });\n        } else {\n          console.error(err.response.data);\n          dispatch({\n            type,\n            error: true,\n            confirmationError: 'Internal error: Could not delete holding'\n          });\n        }\n      });\n  };\n}\n\n\nfunction sellGameHoldingLoading() {\n  return { type: GAME_SELL_HOLDING_LOADING };\n}\n\nexport function sellGameHolding(id, quantity) {\n  return function(dispatch, getState) {\n    dispatch(sellGameHoldingLoading());\n    const type = GAME_SELL_HOLDING;\n    return axios\n      .post(\n        `/game/sell`,\n        { id, quantity },\n        getConfig(getState)\n      )\n      .then(res => {\n        const {\n          data: { game_holding }\n        } = res;\n        dispatch({\n          type,\n          error: null,\n          game_holding,\n          confirmation: `Successfully sold ${\n            quantity\n          } units of \"${game_holding.stock_code.toUpperCase()}\"`\n        });\n      })\n      .catch(err => {\n        if (err.response.status < 500) {\n          dispatch({ type, error: true, confirmationError: err.response.data });\n        } else {\n          console.error(err.response.data);\n          dispatch({\n            type,\n            error: true,\n            confirmationError: 'Internal error: Could not add holding'\n          });\n        }\n      });\n  };\n}\n\nexport function resetGame() {\n\treturn { type: GAME_RESET };\n}"]},"metadata":{},"sourceType":"module"}