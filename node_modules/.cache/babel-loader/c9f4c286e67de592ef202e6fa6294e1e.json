{"ast":null,"code":"var _jsxFileName = \"/Users/dezza/capstone-project-yushi/src/components/neuralPage/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { InputLabel, Input, CircularProgress, FormControl, Grid, Snackbar, IconButton } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Candle from \"./candle.PNG\";\nimport './neural.css';\nimport Arrow from \"./arrow.gif\";\nimport CNNimg from \"./cnn.png\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Nav, Navbar, NavDropdown, Spinner, Row, Col, Button } from 'react-bootstrap';\nimport CloseIcon from '@material-ui/icons/Close';\nexport default function NeuralNet() {\n  const [stockCode, setStockCode] = useState('');\n  const [code, setCode] = useState('');\n  const [isFetching, setIsFetching] = useState(false);\n  const [data, setData] = useState(null); // ERRORS \n\n  const [snackBarError, setSnackBarError] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [fetchingError, setFetchingError] = useState(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setIsFetching(true);\n    setFetchingError(null);\n    setSnackBarError(null);\n    setData(null);\n    axios.post('/analytics/predict', {\n      code: stockCode\n    }).then(res => fetchSuccess(res.data)).catch(err => fetchError(err));\n  };\n\n  const fetchSuccess = data => {\n    setIsFetching(false);\n    setFetchingError(null);\n    setSnackBarError(null);\n    setData(data);\n    setCode(stockCode);\n  };\n\n  const fetchError = error => {\n    setIsFetching(false);\n\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(fetchingError);\n\n      if (error.response.status === 422) {\n        // Snackbar error because it to do with form\n        setSnackBarError(`${error.response.status} Error: ${error.response.data}`);\n        setOpen(true);\n      } else {\n        setFetchingError(`${error.response.status} Error: ${error.response.data}`);\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      setFetchingError('Request was made but no response was received.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      setFetchingError(error.message);\n    }\n  };\n\n  const handleSnackBarClose = () => {\n    setOpen(false);\n    setSnackBarError(null);\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Container, {\n    maxWidth: \"lg\",\n    className: \"analysis-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Neural Net\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(Row, {\n    className: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Candlestick charts are known to give valuable information about share market trends. \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), \"Previous studies have found the usage of candlestick charts as input to convolutional neural networks to be effective to detect trends and patterns, especially in predicting short term trends. \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), \"With this in mind we created a dataset by converting historical ASX50 data (2005-2018) into candlestick charts of 20-day periods. We trained the CNN on these images (146,431 in total) and tested it on historical dat from 2018-2020.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), \"The output of the neural network predicts if a stock will go up (open less than close) or down (open more than close) the next day.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), \"While the prediction accepts input of any ASX stock, please note it was trained and tested on only the ASX50 companies and so accuracy may differ.\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(Row, {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \" Input: \"), React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \" Neural Net:\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \" Output:\")), React.createElement(Row, {\n    className: \"midRow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Candle,\n    className: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: CNNimg,\n    className: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Arrow,\n    className: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), \" \")), React.createElement(Row, {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \" 3x50x50 candlestick charts \"), React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \" Conv2d(8)maxpool -> Conv2d(16)maxpool -> Conv2d(32)maxpool -> Conv2d(64)maxpool -> flatten -> Linear(1)\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \" Will the stock go up or down?\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(Row, {\n    className: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Enter the stock below which will be inputted into the neural net:\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"stock-code-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Stock Code\"), React.createElement(Input, {\n    required: true,\n    placeholder: \"ex. ASX\",\n    value: stockCode,\n    input: true,\n    type: \"text\",\n    onChange: e => setStockCode(e.target.value.toUpperCase()),\n    inputProps: {\n      'aria-label': 'stock-code-input',\n      maxlength: 3,\n      minlength: 3\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container-fluid button-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    variant: \"outline-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Predict\")))), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })), data && !isFetching && !fetchingError && React.createElement(Container, {\n    maxWidth: \"md\",\n    style: {\n      margin: '40px auto'\n    },\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"pred\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, code, \" Prediction Results\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })), React.createElement(Row, {\n    className: \"pred2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(Col, {\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Will the stock go up or down tomorrow?\", data.prediction === 0 ? React.createElement(Col, {\n    className: \"no\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Down\") : React.createElement(Col, {\n    className: \"yes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Up\")), React.createElement(Col, {\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Percentage probability: \", React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, data.output.toFixed(3), \"%\")), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })))), isFetching && React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), snackBarError && React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    open: open,\n    autoHideDuration: 5000,\n    onClose: handleSnackBarClose,\n    message: snackBarError,\n    action: React.createElement(IconButton, {\n      size: \"small\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: handleSnackBarClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      fontSize: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), fetchingError && React.createElement(Alert, {\n    severity: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, fetchingError));\n}","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/components/neuralPage/index.js"],"names":["React","useState","useEffect","axios","InputLabel","Input","CircularProgress","FormControl","Grid","Snackbar","IconButton","Alert","Candle","Arrow","CNNimg","Container","Nav","Navbar","NavDropdown","Spinner","Row","Col","Button","CloseIcon","NeuralNet","stockCode","setStockCode","code","setCode","isFetching","setIsFetching","data","setData","snackBarError","setSnackBarError","open","setOpen","fetchingError","setFetchingError","handleSubmit","e","preventDefault","post","then","res","fetchSuccess","catch","err","fetchError","error","response","console","log","status","request","message","handleSnackBarClose","target","value","toUpperCase","maxlength","minlength","margin","prediction","output","toFixed","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {InputLabel, Input, CircularProgress, FormControl, Grid, Snackbar, IconButton } from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Candle from \"./candle.PNG\"\r\nimport './neural.css';\r\nimport Arrow from \"./arrow.gif\"\r\nimport CNNimg from \"./cnn.png\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Container,\r\n  Nav,\r\n  Navbar,\r\n  NavDropdown,\r\n  Spinner,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default function NeuralNet() {\r\n  const [stockCode, setStockCode] = useState('');\r\n  const [code, setCode] = useState('');\r\n  \r\n\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [data, setData] = useState(null)\r\n\r\n  // ERRORS \r\n  const [snackBarError, setSnackBarError] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [fetchingError, setFetchingError] = useState(null)\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    setIsFetching(true);\r\n    setFetchingError(null);\r\n    setSnackBarError(null);\r\n    setData(null);\r\n\r\n    axios.post('/analytics/predict', {\r\n      code: stockCode\r\n    })\r\n    .then(res => fetchSuccess(res.data)).catch((err)=>fetchError(err));\r\n  };\r\n\r\n  const fetchSuccess = (data) => {\r\n    setIsFetching(false);\r\n    setFetchingError(null);\r\n    setSnackBarError(null)\r\n    setData(data);\r\n    setCode(stockCode);\r\n  }\r\n\r\n  const fetchError = (error) => {\r\n    setIsFetching(false);\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.log(fetchingError)\r\n      if (error.response.status === 422){\r\n        // Snackbar error because it to do with form\r\n        setSnackBarError(\r\n          `${error.response.status} Error: ${error.response.data}`\r\n        );\r\n        setOpen(true);\r\n      } else {\r\n        setFetchingError(\r\n          `${error.response.status} Error: ${error.response.data}`\r\n        );\r\n      }\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n      // http.ClientRequest in node.js\r\n      setFetchingError('Request was made but no response was received.');\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      setFetchingError(error.message);\r\n    }\r\n  }\r\n  const handleSnackBarClose = () => {\r\n    setOpen(false);\r\n    setSnackBarError(null);\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"lg\" className=\"analysis-container\">\r\n      <Row className=\"title\"> \r\n          <Col></Col>\r\n          <Col>Neural Net</Col>\r\n          <Col></Col>\r\n      </Row>\r\n      <Row className = \"text\">\r\n          Candlestick charts are known to give valuable information about share market trends. <br></br>\r\n          Previous studies have found the usage of candlestick charts as input to convolutional neural networks to be effective to detect trends and patterns, especially in predicting short term trends. <br></br>\r\n          With this in mind we created a dataset by converting historical ASX50 data (2005-2018) into candlestick charts of 20-day periods. We trained the CNN on these images (146,431 in total) and tested it on historical dat from 2018-2020.  \r\n          <br></br>\r\n          The output of the neural network predicts if a stock will go up (open less than close) or down (open more than close) the next day.\r\n          <br></br>\r\n          While the prediction accepts input of any ASX stock, please note it was trained and tested on only the ASX50 companies and so accuracy may differ. \r\n      </Row>\r\n      <br></br>\r\n      <Row className = \"subtitle\">\r\n          <Col> Input: </Col>\r\n          <Col xs = {6}> Neural Net:</Col>\r\n          <Col> Output:</Col>\r\n      </Row>\r\n      <Row className=\"midRow\">\r\n          <Col><img src = {Candle} className=\"img\"/></Col>\r\n          <Col xs = {6}><img src = {CNNimg} className=\"img\"/></Col>\r\n          <Col><img src = {Arrow} className=\"img\"/> </Col>\r\n      </Row>\r\n      <Row className = \"subtitle\">\r\n          <Col> 3x50x50 candlestick charts </Col>\r\n          <Col xs = {6}> Conv2d(8)maxpool -> Conv2d(16)maxpool -> Conv2d(32)maxpool -> Conv2d(64)maxpool -> flatten -> Linear(1)</Col>\r\n          <Col> Will the stock go up or down?</Col>\r\n      </Row>\r\n      <br></br>\r\n      <Row className=\"text\">\r\n      <Col></Col>\r\n        <Col xs = {6}>Enter the stock below which will be inputted into the neural net:</Col>\r\n        <Col></Col>\r\n      </Row>\r\n      <br></br>\r\n      <Row>\r\n        <Col></Col>\r\n        <Col xs={6}>\r\n          <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormControl variant=\"outlined\" fullWidth>\r\n              <InputLabel id=\"stock-code-label\">Stock Code</InputLabel>\r\n              <Input\r\n                required\r\n                placeholder=\"ex. ASX\"\r\n                value={stockCode}\r\n                input type = \"text\"\r\n                onChange= {(e) => setStockCode(e.target.value.toUpperCase())}\r\n                inputProps={{\r\n                  'aria-label': 'stock-code-input',\r\n                  maxlength: 3,\r\n                  minlength: 3,\r\n                }}\r\n              />\r\n              <br></br>\r\n\r\n            </FormControl>\r\n            <div className=\"container-fluid button-container\">\r\n\r\n            <Button type=\"submit\" variant=\"outline-primary\">Predict</Button>\r\n            </div>\r\n\r\n          </form>\r\n          </Col>\r\n          <Col></Col>\r\n        </Row>\r\n        <br></br>\r\n        </Container>\r\n\r\n        {data && !isFetching && !fetchingError &&(\r\n          <Container maxWidth=\"md\" style={{ margin: '40px auto' }} justify=\"center\">\r\n            <React.Fragment>\r\n              <Row className=\"pred\">\r\n              <Col></Col>\r\n              <Col xs = {6}>{code} Prediction Results</Col>\r\n              <Col></Col>\r\n              </Row>\r\n              <Row className=\"pred2\">\r\n                <Col></Col>\r\n              <Col xs = {4}>Will the stock go up or down tomorrow?{data.prediction === 0 ? <Col className=\"no\">Down</Col> : <Col className=\"yes\">Up</Col> }</Col>\r\n              <Col xs ={4}>Percentage probability: <Col>{data.output.toFixed(3)}%</Col></Col>\r\n              <Col></Col>\r\n              </Row>\r\n            </React.Fragment>\r\n          </Container>\r\n        )}\r\n        \r\n        {isFetching && <CircularProgress />}\r\n                \r\n        {/* Displaying any errors that occurred */}\r\n        {snackBarError && (\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'center',\r\n            }}\r\n            open={open}\r\n            autoHideDuration={5000}\r\n            onClose={handleSnackBarClose}\r\n            message={snackBarError}\r\n            action={\r\n              <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleSnackBarClose}\r\n              >\r\n              <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            }\r\n          />\r\n        )}\r\n\r\n        {fetchingError && <Alert severity = \"error\">{fetchingError}</Alert>}\r\n\r\n       \r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}