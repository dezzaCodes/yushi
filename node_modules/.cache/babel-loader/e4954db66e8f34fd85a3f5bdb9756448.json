{"ast":null,"code":"/**\n * the actions of account stuff\n * dispatch different actions in different case\n * returnErrors send the error massage to the error massge store\n */\nimport axios from 'axios';\nimport { returnErrors } from './errors.js';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT_SUCCESS, REG_SUCCESS, REG_FAILURE, GUEST_USER } from './types';\nconst LOGIN_URL = '/api/auth/login';\nconst REGISTRATION_URL = '/api/auth/register';\nconst GET_USER_URL = '/api/auth/user';\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  const token = getState().auth.token;\n\n  if (!token) {\n    dispatch({\n      type: GUEST_USER\n    });\n    return;\n  } // load user\n\n\n  axios.post(GET_USER_URL, {}, getConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const login = (email, password) => dispatch => {\n  // request body\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post(LOGIN_URL, body, getConfig()).then(res => {\n    console.log(res.data);\n\n    if (res.data.msg === LOGIN_FAILURE) {\n      dispatch(returnErrors(res.data.msg, res.status));\n      dispatch({\n        type: LOGIN_FAILURE\n      });\n    } else if (res.data.msg === LOGIN_SUCCESS) {\n      dispatch(returnErrors({}, null));\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const logout = () => dispatch => {\n  dispatch(returnErrors({}, null));\n  dispatch({\n    type: LOGOUT_SUCCESS\n  });\n};\nexport const register = (email, password) => dispatch => {\n  // request body\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post(REGISTRATION_URL, body, getConfig()).then(res => {\n    if (res.data.msg === REG_SUCCESS) {\n      dispatch(returnErrors({}, null));\n      dispatch({\n        type: REG_SUCCESS,\n        payload: res.data\n      });\n    } else if (res.data.msg === REG_FAILURE) {\n      dispatch(returnErrors(res.data.msg, res.status));\n      dispatch({\n        type: REG_FAILURE\n      });\n    }\n  }).catch(err => {\n    console.log(err);\n  });\n}; // Setup a http request with content-type header, and token if needed\n\nexport const getConfig = getState => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  if (!getState) return config; // get the token from authentication state\n\n  const token = getState().auth.token || localStorage.getItem('token'); // Add the authorization header if token exists\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/actions/auth.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_SUCCESS","REG_SUCCESS","REG_FAILURE","GUEST_USER","LOGIN_URL","REGISTRATION_URL","GET_USER_URL","loadUser","dispatch","getState","type","token","auth","post","getConfig","then","res","payload","data","catch","err","response","status","login","email","password","body","JSON","stringify","console","log","msg","logout","register","config","headers","localStorage","getItem"],"mappings":"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","sourcesContent":["/**\n * the actions of account stuff\n * dispatch different actions in different case\n * returnErrors send the error massage to the error massge store\n */\n\nimport axios from 'axios';\nimport { returnErrors } from './errors.js';\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT_SUCCESS,\n  REG_SUCCESS,\n  REG_FAILURE,\n  GUEST_USER,\n} from './types';\n\nconst LOGIN_URL = '/api/auth/login';\nconst REGISTRATION_URL = '/api/auth/register';\nconst GET_USER_URL = '/api/auth/user';\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({ type: USER_LOADING });\n\n  const token = getState().auth.token;\n  if (!token) {\n    dispatch({ type: GUEST_USER });\n    return;\n  }\n\n  // load user\n  axios\n    .post(GET_USER_URL, {}, getConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\nexport const login = (email, password) => (dispatch) => {\n  // request body\n  const body = JSON.stringify({ email, password });\n\n  axios\n    .post(LOGIN_URL, body, getConfig())\n    .then((res) => {\n      console.log(res.data)\n      if (res.data.msg === LOGIN_FAILURE) {\n        dispatch(returnErrors(res.data.msg, res.status));\n        dispatch({\n          type: LOGIN_FAILURE,\n        });\n      } else if (res.data.msg === LOGIN_SUCCESS) {\n        dispatch(returnErrors({},null));\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: res.data,\n        });\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport const logout = () => (dispatch) => {\n  dispatch(returnErrors({},null));\n  dispatch({\n    type: LOGOUT_SUCCESS,\n  });\n};\n\nexport const register = (email, password) => (dispatch) => {\n  // request body\n  const body = JSON.stringify({ email, password });\n\n  axios\n    .post(REGISTRATION_URL, body, getConfig())\n    .then((res) => {\n      if (res.data.msg === REG_SUCCESS) {\n        dispatch(returnErrors({},null));\n        dispatch({\n          type: REG_SUCCESS,\n          payload: res.data,\n        });\n      } else if (res.data.msg === REG_FAILURE) {\n        dispatch(returnErrors(res.data.msg, res.status));\n        dispatch({\n          type: REG_FAILURE,\n        });\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n// Setup a http request with content-type header, and token if needed\nexport const getConfig = (getState) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  if (!getState) return config;\n\n  // get the token from authentication state\n  const token = getState().auth.token || localStorage.getItem('token');\n\n  // Add the authorization header if token exists\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}