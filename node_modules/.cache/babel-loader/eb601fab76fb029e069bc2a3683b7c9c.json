{"ast":null,"code":"var _jsxFileName = \"/Users/dezza/capstone-project-yushi/src/components/AnalysisPage/MonteCarlo.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { FormControl, Select, MenuItem, InputLabel, Checkbox, FormControlLabel, Input, Button, CircularProgress, Grid, Container, Snackbar, IconButton } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Alert from '@material-ui/lab/Alert';\nimport SimulationDisplay from './SimulationDisplay';\n\nfunction MonteCarlo() {\n  // For monte carlo form\n  const [period, setPeriod] = useState('2y');\n  const [useGBM, setUseGBM] = useState(true);\n  const [useWeighted, setUseWeighted] = useState(true);\n  const [stockCode, setStockCode] = useState('');\n  const [nSimulations, setNSimulations] = useState(200);\n  const [timeInterval, setTimeInterval] = useState(365);\n  const [timeStep, setTimeStep] = useState(1); // For fetching data from backend\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [simulations, setSimulations] = useState(null); // showing errors\n\n  const [snackBarError, setSnackBarError] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [fetchingError, setFetchingError] = useState(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setIsFetching(true);\n    setFetchingError(null);\n    setSnackBarError(null); // Make post request to backend to simulate\n\n    axios.post('/analytics/monte-carlo-sim', {\n      stock_code: stockCode,\n      period: period,\n      num_simulations: parseInt(nSimulations),\n      t_interval: parseInt(timeInterval),\n      use_weighted: useWeighted,\n      use_gbm: useGBM,\n      time_step: parseInt(timeStep)\n    }).then(res => {\n      if (Object.keys(res.data).length > 0) {\n        fetchSuccess(res.data);\n      } else {\n        fetchError({\n          message: 'Invalid stock code used.'\n        });\n      }\n    }).catch(fetchError);\n  };\n\n  const fetchSuccess = data => {\n    setIsFetching(false); // rearrange data for display in line graph (need to be a list)\n    // order by simulated day\n\n    const simulations = [];\n\n    for (let i = 0; i < Object.keys(data).length; i++) {\n      const key = Object.keys(data)[i];\n      const daysSimulation = data[key];\n      simulations.push(daysSimulation);\n    }\n\n    setSimulations(simulations);\n  };\n\n  const fetchError = error => {\n    setIsFetching(false);\n\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      if (error.response.status === 422) {\n        // Snackbar error because it to do with form\n        setSnackBarError(`${error.response.status} Error: ${error.response.data}`);\n        setOpen(true);\n      } else {\n        setFetchingError(`${error.response.status} Error: ${error.response.data}`);\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      setFetchingError('Request was made but no response was received.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      setFetchingError(error.message);\n    }\n  };\n\n  const handleSnackBarClose = () => {\n    setOpen(false);\n    setSnackBarError(null);\n  };\n\n  return React.createElement(Container, {\n    maxWidth: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Container, {\n    maxWidth: \"lg\",\n    className: \"analysis-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Monte Carlo Simulation \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), \"(Stock Price Simulation)\"), React.createElement(\"div\", {\n    className: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"This Monte Carlo simulation tool provides a way to predict stock growth based on historical trends. There are several parameters that can be modified to test out different market environments:\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Use Weighted Mean & Standard Deviation\"), \": When this is toggled on, the more recent historical prices will impact the final prediction prices more heavily than older prices. This is recommended particularly when calculating more short term prices.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Use Geometric Browian Motion (GBM)\"), \": When this is toggled on, the model will simulate prices in stochastic situations by introducing \\\"shock\\\" and \\\"drift\\\" variables. Otherwise, the model will assume that the market is deterministic.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Time Step of Simulation\"), \": When this is greater than 1, the model will simulate prices for every nth day which will affect the \\\"shock\\\" and \\\"drift\\\" of GBM\")))), React.createElement(Container, {\n    maxWidth: \"md\",\n    className: \"analysis-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    id: \"monte-carlo-simulation-form\",\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"stock-code-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Stock Code\"), React.createElement(Input, {\n    required: true,\n    placeholder: \"ex. ASX\",\n    value: stockCode,\n    onChange: e => setStockCode(e.target.value.toUpperCase()),\n    inputProps: {\n      'aria-label': 'stock-code-input',\n      maxLength: 3,\n      minLength: 3\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 8,\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    onChange: () => setUseWeighted(!useWeighted),\n    control: React.createElement(Checkbox, {\n      checked: useWeighted,\n      name: \"weighted-toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }),\n    label: \"Use Weighted Mean & Standard Deviation for Calculation\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    onChange: () => setUseGBM(!useGBM),\n    control: React.createElement(Checkbox, {\n      checked: useGBM,\n      name: \"gbm-toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }),\n    label: \"Use Geometric Browian Motion\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })), useGBM === true && React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"time-step-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Time Step of Simulation\"), React.createElement(Input, {\n    value: timeStep,\n    onChange: e => setTimeStep(e.target.value),\n    inputProps: {\n      'aria-label': 'time-step-input',\n      type: 'number',\n      max: timeInterval,\n      min: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"mc-period-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"Period of Historical Data Used\"), React.createElement(Select, {\n    labelId: \"mc-period-select-label\",\n    id: \"mc-period-select\",\n    value: period,\n    onChange: e => setPeriod(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"1mo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \"1 months\"), React.createElement(MenuItem, {\n    value: \"3mo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, \"3 months\"), React.createElement(MenuItem, {\n    value: \"6mo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, \"6 months\"), React.createElement(MenuItem, {\n    value: \"1y\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"1y\"), React.createElement(MenuItem, {\n    value: \"2y\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"2y\"), React.createElement(MenuItem, {\n    value: \"5y\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"5y\"), React.createElement(MenuItem, {\n    value: \"10y\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"10y\"), React.createElement(MenuItem, {\n    value: \"max\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \"All\")))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"n-simulations-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"Number of Simulations\"), React.createElement(Input, {\n    value: nSimulations,\n    onChange: e => setNSimulations(e.target.value),\n    inputProps: {\n      'aria-label': 'number-of-simulations-input',\n      type: 'number',\n      max: 2000,\n      min: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"time-interval-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, \"Number of Days to Simulate\"), React.createElement(Input, {\n    value: timeInterval,\n    onChange: e => setTimeInterval(e.target.value),\n    inputProps: {\n      'aria-label': 'time-interval-input',\n      type: 'number',\n      max: 2000,\n      min: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: \"button-container\",\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, \"Simulate\"))))), isFetching && React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }), snackBarError && React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    open: open,\n    autoHideDuration: 6000,\n    onClose: handleSnackBarClose,\n    message: snackBarError,\n    action: React.createElement(IconButton, {\n      size: \"small\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: handleSnackBarClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      fontSize: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }), fetchingError && React.createElement(Alert, {\n    severity: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, fetchingError), !fetchingError && !isFetching && simulations && React.createElement(SimulationDisplay, {\n    data: simulations,\n    timeStep: timeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }));\n}\n\nexport default MonteCarlo;","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/components/AnalysisPage/MonteCarlo.js"],"names":["React","useState","axios","FormControl","Select","MenuItem","InputLabel","Checkbox","FormControlLabel","Input","Button","CircularProgress","Grid","Container","Snackbar","IconButton","CloseIcon","Alert","SimulationDisplay","MonteCarlo","period","setPeriod","useGBM","setUseGBM","useWeighted","setUseWeighted","stockCode","setStockCode","nSimulations","setNSimulations","timeInterval","setTimeInterval","timeStep","setTimeStep","isFetching","setIsFetching","simulations","setSimulations","snackBarError","setSnackBarError","open","setOpen","fetchingError","setFetchingError","handleSubmit","e","preventDefault","post","stock_code","num_simulations","parseInt","t_interval","use_weighted","use_gbm","time_step","then","res","Object","keys","data","length","fetchSuccess","fetchError","message","catch","i","key","daysSimulation","push","error","response","status","request","handleSnackBarClose","target","value","toUpperCase","maxLength","minLength","type","max","min","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Checkbox,\n  FormControlLabel,\n  Input,\n  Button,\n  CircularProgress,\n  Grid,\n  Container,\n  Snackbar,\n  IconButton,\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Alert from '@material-ui/lab/Alert';\nimport SimulationDisplay from './SimulationDisplay';\n\nfunction MonteCarlo() {\n  // For monte carlo form\n  const [period, setPeriod] = useState('2y');\n  const [useGBM, setUseGBM] = useState(true);\n  const [useWeighted, setUseWeighted] = useState(true);\n  const [stockCode, setStockCode] = useState('');\n  const [nSimulations, setNSimulations] = useState(200);\n  const [timeInterval, setTimeInterval] = useState(365);\n  const [timeStep, setTimeStep] = useState(1);\n\n  // For fetching data from backend\n  const [isFetching, setIsFetching] = useState(false);\n  const [simulations, setSimulations] = useState(null);\n\n  // showing errors\n  const [snackBarError, setSnackBarError] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [fetchingError, setFetchingError] = useState(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setIsFetching(true);\n    setFetchingError(null);\n    setSnackBarError(null);\n\n    // Make post request to backend to simulate\n    axios\n      .post('/analytics/monte-carlo-sim', {\n        stock_code: stockCode,\n        period: period,\n        num_simulations: parseInt(nSimulations),\n        t_interval: parseInt(timeInterval),\n        use_weighted: useWeighted,\n        use_gbm: useGBM,\n        time_step: parseInt(timeStep),\n      })\n      .then((res) => {\n        if (Object.keys(res.data).length > 0) {\n          fetchSuccess(res.data);\n        } else {\n          fetchError({\n            message: 'Invalid stock code used.',\n          });\n        }\n      })\n      .catch(fetchError);\n  };\n\n  const fetchSuccess = (data) => {\n    setIsFetching(false);\n\n    // rearrange data for display in line graph (need to be a list)\n\n    // order by simulated day\n    const simulations = [];\n    for (let i = 0; i < Object.keys(data).length; i++) {\n      const key = Object.keys(data)[i];\n      const daysSimulation = data[key];\n      simulations.push(daysSimulation);\n    }\n\n    setSimulations(simulations);\n  };\n\n  const fetchError = (error) => {\n    setIsFetching(false);\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      if (error.response.status === 422) {\n        // Snackbar error because it to do with form\n        setSnackBarError(\n          `${error.response.status} Error: ${error.response.data}`\n        );\n        setOpen(true);\n      } else {\n        setFetchingError(\n          `${error.response.status} Error: ${error.response.data}`\n        );\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      setFetchingError('Request was made but no response was received.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      setFetchingError(error.message);\n    }\n  };\n\n  const handleSnackBarClose = () => {\n    setOpen(false);\n    setSnackBarError(null);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      {/* Info on Monte Carlo simulation */}\n      <Container maxWidth=\"lg\" className=\"analysis-container\">\n        <h2 className=\"title\">\n          Monte Carlo Simulation <br />\n          (Stock Price Simulation)\n        </h2>\n        <div className=\"text\">\n          <p>\n            This Monte Carlo simulation tool provides a way to predict stock\n            growth based on historical trends. There are several parameters that\n            can be modified to test out different market environments:\n          </p>\n          <ul>\n            <li>\n              <strong>Use Weighted Mean & Standard Deviation</strong>: When this\n              is toggled on, the more recent historical prices will impact the\n              final prediction prices more heavily than older prices. This is\n              recommended particularly when calculating more short term prices.\n            </li>\n            <li>\n              <strong>Use Geometric Browian Motion (GBM)</strong>: When this is\n              toggled on, the model will simulate prices in stochastic\n              situations by introducing \"shock\" and \"drift\" variables.\n              Otherwise, the model will assume that the market is deterministic.\n            </li>\n            <li>\n              <strong>Time Step of Simulation</strong>: When this is greater\n              than 1, the model will simulate prices for every nth day which\n              will affect the \"shock\" and \"drift\" of GBM\n            </li>\n          </ul>\n        </div>\n      </Container>\n\n      {/* Form for monte carlo simulation parameters */}\n      <Container maxWidth=\"md\" className=\"analysis-container\">\n        <form\n          id=\"monte-carlo-simulation-form\"\n          autoComplete=\"off\"\n          onSubmit={handleSubmit}\n        >\n          <Grid container spacing={3} justify=\"center\">\n            <Grid item xs={12} md={4}>\n              <FormControl variant=\"outlined\" fullWidth>\n                <InputLabel id=\"stock-code-label\">Stock Code</InputLabel>\n                <Input\n                  required\n                  placeholder=\"ex. ASX\"\n                  value={stockCode}\n                  onChange={(e) => setStockCode(e.target.value.toUpperCase())}\n                  inputProps={{\n                    'aria-label': 'stock-code-input',\n                    maxLength: 3,\n                    minLength: 3,\n                  }}\n                />\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={8} container>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  onChange={() => setUseWeighted(!useWeighted)}\n                  control={\n                    <Checkbox checked={useWeighted} name=\"weighted-toggle\" />\n                  }\n                  label=\"Use Weighted Mean & Standard Deviation for Calculation\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n\n              <Grid item xs={7}>\n                <FormControlLabel\n                  onChange={() => setUseGBM(!useGBM)}\n                  control={<Checkbox checked={useGBM} name=\"gbm-toggle\" />}\n                  label=\"Use Geometric Browian Motion\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n\n              {useGBM === true && (\n                <Grid item xs={5}>\n                  <FormControl variant=\"outlined\" fullWidth>\n                    <InputLabel id=\"time-step-label\">\n                      Time Step of Simulation\n                    </InputLabel>\n                    <Input\n                      value={timeStep}\n                      onChange={(e) => setTimeStep(e.target.value)}\n                      inputProps={{\n                        'aria-label': 'time-step-input',\n                        type: 'number',\n                        max: timeInterval,\n                        min: 1,\n                      }}\n                    />\n                  </FormControl>\n                </Grid>\n              )}\n            </Grid>\n            <Grid item xs={4}>\n              <FormControl fullWidth>\n                <InputLabel id=\"mc-period-select-label\">\n                  Period of Historical Data Used\n                </InputLabel>\n                <Select\n                  labelId=\"mc-period-select-label\"\n                  id=\"mc-period-select\"\n                  value={period}\n                  onChange={(e) => setPeriod(e.target.value)}\n                >\n                  {/* 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max */}\n                  <MenuItem value=\"1mo\">1 months</MenuItem>\n                  <MenuItem value=\"3mo\">3 months</MenuItem>\n                  <MenuItem value=\"6mo\">6 months</MenuItem>\n                  <MenuItem value=\"1y\">1y</MenuItem>\n                  <MenuItem value=\"2y\">2y</MenuItem>\n                  <MenuItem value=\"5y\">5y</MenuItem>\n                  <MenuItem value=\"10y\">10y</MenuItem>\n                  <MenuItem value=\"max\">All</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={4}>\n              <FormControl fullWidth>\n                <InputLabel id=\"n-simulations-label\">\n                  Number of Simulations\n                </InputLabel>\n                <Input\n                  value={nSimulations}\n                  onChange={(e) => setNSimulations(e.target.value)}\n                  inputProps={{\n                    'aria-label': 'number-of-simulations-input',\n                    type: 'number',\n                    max: 2000,\n                    min: 1,\n                  }}\n                />\n              </FormControl>\n            </Grid>\n            <Grid item xs={4}>\n              <FormControl fullWidth>\n                <InputLabel id=\"time-interval-label\">\n                  Number of Days to Simulate\n                </InputLabel>\n                <Input\n                  value={timeInterval}\n                  onChange={(e) => setTimeInterval(e.target.value)}\n                  inputProps={{\n                    'aria-label': 'time-interval-input',\n                    type: 'number',\n                    max: 2000,\n                    min: 1,\n                  }}\n                />\n              </FormControl>\n            </Grid>\n            <Grid item>\n              <Button\n                className=\"button-container\"\n                type=\"submit\"\n                color=\"primary\"\n                variant=\"contained\"\n              >\n                Simulate\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Container>\n\n      {isFetching && <CircularProgress />}\n\n      {/* Displaying any errors that occurred */}\n      {snackBarError && (\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          open={open}\n          autoHideDuration={6000}\n          onClose={handleSnackBarClose}\n          message={snackBarError}\n          action={\n            <IconButton\n              size=\"small\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              onClick={handleSnackBarClose}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          }\n        />\n      )}\n      {fetchingError && <Alert severity=\"error\">{fetchingError}</Alert>}\n\n      {/* Display the simulations on line chart */}\n      {!fetchingError && !isFetching && simulations && (\n        <SimulationDisplay data={simulations} timeStep={timeStep} />\n      )}\n    </Container>\n  );\n}\n\nexport default MonteCarlo;\n"]},"metadata":{},"sourceType":"module"}