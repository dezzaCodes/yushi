{"ast":null,"code":"var _jsxFileName = \"/Users/dezza/capstone-project-yushi/src/components/SearchPage/SearchContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport matchSorter from 'match-sorter';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { fetchCompaniesIfNeeded } from '../../actions/companies';\nimport Error from '../Error';\nimport SearchResults from './SearchResults';\n\nclass SearchContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: this.props.location.search.slice(1),\n      results: [],\n      related: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dispatch,\n      data\n    } = this.props;\n    const {\n      query\n    } = this.state;\n    dispatch(fetchCompaniesIfNeeded()); // Display search results if data is fetched & query is not empty\n\n    if (data.length > 0 && query.length > 0) {\n      const results = matchSorter(data, query, {\n        threshold: matchSorter.rankings.CONTAINS\n      });\n      const related = results.length === 0 ? matchSorter(data, query) : [];\n      this.setState({ ...this.state,\n        results,\n        related\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      location: {\n        search\n      },\n      data\n    } = this.props; // Update search results if data has been fetched, or query has changed\n\n    const query = search.slice(1);\n\n    if (data !== prevProps.data || search !== prevProps.location.search) {\n      // If there is a query then filter results accordingly\n      const results = query ? matchSorter(data, query, {\n        threshold: matchSorter.rankings.CONTAINS\n      }) : []; // If there is a query but there aren't any results, find related stocks\n\n      const related = query && results.length === 0 ? matchSorter(data, query) : [];\n      this.setState({ ...this.state,\n        query,\n        results,\n        related\n      });\n    }\n  }\n\n  render() {\n    const {\n      isFetching,\n      error\n    } = this.props;\n    const {\n      results,\n      related\n    } = this.state;\n    const query = this.props.location.search.slice(1);\n    if (!query) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Search for a stock by their code or their company name\");\n    if (isFetching) return React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    });\n    if (error) return React.createElement(Error, Object.assign({}, error, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(SearchResults, {\n      heading: `Results containing '${query}'`,\n      data: results,\n      nRowsPerPage: 10,\n      history: this.props.history,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), results.length === 0 ? React.createElement(SearchResults, {\n      heading: \"Related\",\n      data: related,\n      nRowsPerPage: 10,\n      history: this.props.history,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }) : '');\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    companies\n  } = state;\n  const {\n    isFetching,\n    data,\n    error\n  } = companies;\n  return {\n    isFetching,\n    data,\n    error\n  };\n};\n\nSearchContainer.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  error: PropTypes.object\n};\nexport default connect(mapStateToProps)(SearchContainer);","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/components/SearchPage/SearchContainer.js"],"names":["React","Component","PropTypes","connect","matchSorter","CircularProgress","fetchCompaniesIfNeeded","Error","SearchResults","SearchContainer","state","query","props","location","search","slice","results","related","componentDidMount","dispatch","data","length","threshold","rankings","CONTAINS","setState","componentDidUpdate","prevProps","render","isFetching","error","history","mapStateToProps","companies","propTypes","bool","isRequired","array","func","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport matchSorter from 'match-sorter';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { fetchCompaniesIfNeeded } from '../../actions/companies';\nimport Error from '../Error';\nimport SearchResults from './SearchResults';\n\nclass SearchContainer extends Component {\n  state = {\n    query: this.props.location.search.slice(1),\n    results: [],\n    related: []\n  };\n\n  componentDidMount() {\n    const { dispatch, data } = this.props;\n    const { query } = this.state;\n\n    dispatch(fetchCompaniesIfNeeded());\n\n    // Display search results if data is fetched & query is not empty\n    if (data.length > 0 && query.length > 0) {\n      const results = matchSorter(data, query, {\n        threshold: matchSorter.rankings.CONTAINS\n      });\n      const related = results.length === 0 ? matchSorter(data, query) : [];\n\n      this.setState({\n        ...this.state,\n        results,\n        related\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      location: { search },\n      data\n    } = this.props;\n\n    // Update search results if data has been fetched, or query has changed\n    const query = search.slice(1);\n    if (data !== prevProps.data || search !== prevProps.location.search) {\n      // If there is a query then filter results accordingly\n      const results = query\n        ? matchSorter(data, query, {\n            threshold: matchSorter.rankings.CONTAINS\n          })\n        : [];\n\n      // If there is a query but there aren't any results, find related stocks\n      const related =\n        query && results.length === 0 ? matchSorter(data, query) : [];\n\n      this.setState({\n        ...this.state,\n        query,\n        results,\n        related\n      });\n    }\n  }\n\n  render() {\n    const { isFetching, error } = this.props;\n    const { results, related } = this.state;\n    const query = this.props.location.search.slice(1);\n    if (!query)\n      return <p>Search for a stock by their code or their company name</p>;\n    if (isFetching) return <CircularProgress />;\n    if (error) return <Error {...error} {...this.props} />;\n\n    return (\n      <div>\n        <SearchResults\n          heading={`Results containing '${query}'`}\n          data={results}\n          nRowsPerPage={10}\n          history={this.props.history}\n        />\n        {results.length === 0 ? (\n          <SearchResults\n            heading=\"Related\"\n            data={related}\n            nRowsPerPage={10}\n            history={this.props.history}\n          />\n        ) : (\n          ''\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { companies } = state;\n  const { isFetching, data, error } = companies;\n  return { isFetching, data, error };\n};\n\nSearchContainer.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  error: PropTypes.object\n};\n\nexport default connect(mapStateToProps)(SearchContainer);\n"]},"metadata":{},"sourceType":"module"}