{"ast":null,"code":"var _jsxFileName = \"/Users/dezza/capstone-project-yushi/src/components/PortfolioPage/IndPortfolioPerformance.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Error from '../Error';\nimport { Link } from 'react-router-dom';\nimport { currencyFormatter, PrimaryStats, ShareDistributionGraph } from './PortfoliosPerformance';\nimport PortfolioHistorical from './PortfolioHistorical';\nimport { Table, TableBody, TableRow, TableCell, TableHead, TableContainer, TablePagination } from '@material-ui/core';\n/* \n  data has properties: \n    - change(pin): -148.64999999999964\n    - change_percent: \"-3.267930750206091%\"\n    - current_worth: 4400.1\n    - net_worth: 959.22\n    - prev_net_worth: 1107.97\n    - prev_worth: 4548.75\n    - portfolio_performances: [\n      holding_performances\n    ]\n*/\n\nfunction IndPortfolioPerformance({\n  isFetching,\n  data,\n  error,\n  portfolioID,\n  historicalPerformance,\n  handleRefreshHistoricalPerfGraph\n}) {\n  const [bestPerforming, setBestPerforming] = React.useState(null);\n  const [worstPerforming, setWorstPerforming] = React.useState(null);\n  const [portfolio, setPortfolio] = React.useState(null);\n  React.useEffect(() => {\n    setBestPerforming(null);\n    setWorstPerforming(null);\n    const {\n      portfolio_performances\n    } = data;\n    if (!portfolio_performances) return;\n    let portfolio = portfolio_performances.filter(p => p.portfolio_id === portfolioID);\n\n    if (portfolio.length === 0) {\n      return;\n    }\n\n    setPortfolio(portfolio[0]);\n  }, [data, portfolioID]);\n  React.useEffect(() => {\n    if (!portfolio) return;\n    const {\n      holding_performances\n    } = portfolio;\n    if (!holding_performances || holding_performances.length === 0) return;\n    let maxValue = -Infinity;\n    let max = null;\n    let minValue = Infinity;\n    let min = null;\n    holding_performances.forEach(p => {\n      if (!p.change_percent) return;\n      const percent = p.change_percent;\n\n      if (percent >= maxValue) {\n        maxValue = percent;\n        max = p;\n      }\n\n      if (percent <= minValue) {\n        minValue = percent;\n        min = p;\n      }\n    });\n    setBestPerforming(max);\n    setWorstPerforming(min);\n  }, [portfolio]);\n  /* \n      Displays only current portfolio stats\n  */\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, error && React.createElement(Error, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 7,\n    className: \"performance-container\",\n    direction: \"row\",\n    alignItems: \"center\",\n    justify: \"space-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, isFetching && React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), portfolio && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(PrimaryStats, Object.assign({}, portfolio, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), portfolio.holding_performances && bestPerforming && worstPerforming && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    container: true,\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(OtherStats, {\n    bestPerforming: bestPerforming,\n    worstPerforming: worstPerforming,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(ShareDistributionGraph, {\n    distribution: portfolio.holding_performances,\n    nameKey: \"code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Stock Distribution\"))), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 8,\n    container: true,\n    alignItems: \"center\",\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(PortfolioHistorical, Object.assign({}, historicalPerformance, {\n    portfolioID: portfolioID,\n    refreshGraph: handleRefreshHistoricalPerfGraph,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    md: 9,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Stock Holding Performances\"), React.createElement(HoldingGroupList, {\n    data: portfolio.holding_performances,\n    fillWithEmpty: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }))))));\n}\n\nIndPortfolioPerformance.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.object.isRequired,\n  portfolioID: PropTypes.number.isRequired,\n  historicalPerformance: PropTypes.object.isRequired,\n  handleRefreshHistoricalPerfGraph: PropTypes.func.isRequired,\n  error: PropTypes.object\n};\n\nfunction OtherStats({\n  bestPerforming,\n  worstPerforming\n}) {\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    alignItems: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, bestPerforming && React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-start\",\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Best Performing:\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, bestPerforming.code)), React.createElement(Grid, {\n    item: true,\n    className: bestPerforming.change > 0 ? 'positive' : bestPerforming.change < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, currencyFormatter.format(bestPerforming.change), \" (\", bestPerforming.change_percent, \"%)\", bestPerforming.change > 0 ? '▴' : bestPerforming.change < 0 ? '▾' : '-'))), worstPerforming && React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-start\",\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"Worst Performing:\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, worstPerforming.code)), React.createElement(Grid, {\n    item: true,\n    className: worstPerforming.change > 0 ? 'positive' : worstPerforming.change < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, currencyFormatter.format(worstPerforming.change), \" (\", worstPerforming.change_percent, \"%)\", worstPerforming.change > 0 ? '▴' : worstPerforming.change < 0 ? '▾' : '-'))));\n}\n\nfunction HoldingGroupList({\n  data,\n  fillWithEmpty\n}) {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleChangePage = (event, page) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n  return React.createElement(TableContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    className: \"table-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"Code\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, \"Market Value\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \"Daily Change\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"Total Change\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, \"Total Quantity\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, \"Price Bought\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(h => React.createElement(HoldingGroupPerformance, Object.assign({}, h, {\n    key: h.code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }))), data.length > 5 && fillWithEmpty && emptyRows > 0 && React.createElement(TableRow, {\n    style: {\n      height: 52.8 * emptyRows\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    colSpan: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  })))), data.length > 5 && React.createElement(TablePagination, {\n    component: \"div\",\n    rowsPerPageOptions: [5, 10, 25],\n    count: data.length,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }));\n}\n\nexport function HoldingGroupPerformance({\n  code,\n  change,\n  change_percent,\n  net_worth,\n  current_worth,\n  net_worth_percent,\n  price_bought,\n  total_quantity\n}) {\n  return React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: `/stock/${code}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, code.toUpperCase())), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, currencyFormatter.format(current_worth)), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: change > 0 ? 'positive' : change < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, currencyFormatter.format(change), \" (\", change_percent, \"%)\", change > 0 ? '▴' : change < 0 ? '▾' : '-')), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: net_worth > 0 ? 'positive' : net_worth < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, currencyFormatter.format(net_worth), \" (\", net_worth_percent, \"%)\", net_worth > 0 ? '▴' : net_worth < 0 ? '▾' : '-')), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, total_quantity), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343\n    },\n    __self: this\n  }, currencyFormatter.format(price_bought)));\n}\nexport default IndPortfolioPerformance;","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/components/PortfolioPage/IndPortfolioPerformance.js"],"names":["React","PropTypes","Grid","CircularProgress","Error","Link","currencyFormatter","PrimaryStats","ShareDistributionGraph","PortfolioHistorical","Table","TableBody","TableRow","TableCell","TableHead","TableContainer","TablePagination","IndPortfolioPerformance","isFetching","data","error","portfolioID","historicalPerformance","handleRefreshHistoricalPerfGraph","bestPerforming","setBestPerforming","useState","worstPerforming","setWorstPerforming","portfolio","setPortfolio","useEffect","portfolio_performances","filter","p","portfolio_id","length","holding_performances","maxValue","Infinity","max","minValue","min","forEach","change_percent","percent","propTypes","bool","isRequired","object","number","func","OtherStats","code","change","format","HoldingGroupList","fillWithEmpty","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","handleChangeRowsPerPage","parseInt","target","value","emptyRows","Math","slice","map","h","height","HoldingGroupPerformance","net_worth","current_worth","net_worth_percent","price_bought","total_quantity","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Error from '../Error';\nimport { Link } from 'react-router-dom';\n\nimport {\n  currencyFormatter,\n  PrimaryStats,\n  ShareDistributionGraph,\n} from './PortfoliosPerformance';\nimport PortfolioHistorical from './PortfolioHistorical';\nimport {\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableHead,\n  TableContainer,\n  TablePagination,\n} from '@material-ui/core';\n\n/* \n  data has properties: \n    - change(pin): -148.64999999999964\n    - change_percent: \"-3.267930750206091%\"\n    - current_worth: 4400.1\n    - net_worth: 959.22\n    - prev_net_worth: 1107.97\n    - prev_worth: 4548.75\n    - portfolio_performances: [\n      holding_performances\n    ]\n*/\n\nfunction IndPortfolioPerformance({\n  isFetching,\n  data,\n  error,\n  portfolioID,\n  historicalPerformance,\n  handleRefreshHistoricalPerfGraph,\n}) {\n  const [bestPerforming, setBestPerforming] = React.useState(null);\n  const [worstPerforming, setWorstPerforming] = React.useState(null);\n  const [portfolio, setPortfolio] = React.useState(null);\n\n  React.useEffect(() => {\n    setBestPerforming(null);\n    setWorstPerforming(null);\n    const { portfolio_performances } = data;\n    if (!portfolio_performances) return;\n\n    let portfolio = portfolio_performances.filter(\n      (p) => p.portfolio_id === portfolioID\n    );\n    if (portfolio.length === 0) {\n      return;\n    }\n\n    setPortfolio(portfolio[0]);\n  }, [data, portfolioID]);\n\n  React.useEffect(() => {\n    if (!portfolio) return;\n    const { holding_performances } = portfolio;\n    if (!holding_performances || holding_performances.length === 0) return;\n    let maxValue = -Infinity;\n    let max = null;\n    let minValue = Infinity;\n    let min = null;\n    holding_performances.forEach((p) => {\n      if (!p.change_percent) return;\n      const percent = p.change_percent;\n      if (percent >= maxValue) {\n        maxValue = percent;\n        max = p;\n      }\n      if (percent <= minValue) {\n        minValue = percent;\n        min = p;\n      }\n    });\n    setBestPerforming(max);\n    setWorstPerforming(min);\n  }, [portfolio]);\n\n  /* \n      Displays only current portfolio stats\n  */\n\n  return (\n    <React.Fragment>\n      {error && <Error />}\n      <Grid\n        container\n        spacing={7}\n        className=\"performance-container\"\n        direction=\"row\"\n        alignItems=\"center\"\n        justify=\"space-around\"\n      >\n        {isFetching && <CircularProgress />}\n        {portfolio && (\n          <React.Fragment>\n            <PrimaryStats {...portfolio} />\n            {portfolio.holding_performances &&\n              bestPerforming &&\n              worstPerforming && (\n                <React.Fragment>\n                  <Grid item xs={12} md={4} container spacing={4}>\n                    <Grid item xs={12}>\n                      <OtherStats\n                        bestPerforming={bestPerforming}\n                        worstPerforming={worstPerforming}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <ShareDistributionGraph\n                        distribution={portfolio.holding_performances}\n                        nameKey=\"code\"\n                      />\n                      <h6 className=\"subtitle\">Stock Distribution</h6>\n                    </Grid>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                    md={8}\n                    container\n                    alignItems=\"center\"\n                    justify=\"center\"\n                  >\n                    <PortfolioHistorical\n                      {...historicalPerformance}\n                      portfolioID={portfolioID}\n                      refreshGraph={handleRefreshHistoricalPerfGraph}\n                    />\n                  </Grid>\n\n                  <Grid item xs={11} md={9}>\n                    {/* Table for Holding Group performances */}\n                    <h5 className=\"subtitle\">Stock Holding Performances</h5>\n                    <HoldingGroupList\n                      data={portfolio.holding_performances}\n                      fillWithEmpty={true}\n                    />\n                  </Grid>\n                </React.Fragment>\n              )}\n          </React.Fragment>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nIndPortfolioPerformance.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.object.isRequired,\n  portfolioID: PropTypes.number.isRequired,\n  historicalPerformance: PropTypes.object.isRequired,\n  handleRefreshHistoricalPerfGraph: PropTypes.func.isRequired,\n  error: PropTypes.object,\n};\n\nfunction OtherStats({ bestPerforming, worstPerforming }) {\n  return (\n    <Grid item xs={12} container alignItems=\"flex-end\">\n      {bestPerforming && (\n        <Grid\n          item\n          xs={12}\n          container\n          spacing={1}\n          alignItems=\"flex-start\"\n          justify=\"center\"\n        >\n          <Grid item>\n            <h6 className=\"subtitle\">Best Performing:</h6>\n          </Grid>\n          <Grid item>\n            <h6>{bestPerforming.code}</h6>\n          </Grid>\n          <Grid\n            item\n            className={\n              bestPerforming.change > 0\n                ? 'positive'\n                : bestPerforming.change < 0\n                ? 'negative'\n                : 'neutral'\n            }\n          >\n            <h6>\n              {currencyFormatter.format(bestPerforming.change)} (\n              {bestPerforming.change_percent}%)\n              {bestPerforming.change > 0\n                ? '▴'\n                : bestPerforming.change < 0\n                ? '▾'\n                : '-'}\n            </h6>\n          </Grid>\n        </Grid>\n      )}\n      {worstPerforming && (\n        <Grid\n          item\n          xs={12}\n          container\n          spacing={1}\n          alignItems=\"flex-start\"\n          justify=\"center\"\n        >\n          <Grid item>\n            <h6 className=\"subtitle\">Worst Performing:</h6>\n          </Grid>\n          <Grid item>\n            <h6>{worstPerforming.code}</h6>\n          </Grid>\n          <Grid\n            item\n            className={\n              worstPerforming.change > 0\n                ? 'positive'\n                : worstPerforming.change < 0\n                ? 'negative'\n                : 'neutral'\n            }\n          >\n            <h6>\n              {currencyFormatter.format(worstPerforming.change)} (\n              {worstPerforming.change_percent}%)\n              {worstPerforming.change > 0\n                ? '▴'\n                : worstPerforming.change < 0\n                ? '▾'\n                : '-'}\n            </h6>\n          </Grid>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n\nfunction HoldingGroupList({ data, fillWithEmpty }) {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleChangePage = (event, page) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead className=\"table-header\">\n          <TableRow>\n            <TableCell align=\"center\">Code</TableCell>\n            <TableCell align=\"center\">Market Value</TableCell>\n            <TableCell align=\"center\">Daily Change</TableCell>\n            <TableCell align=\"center\">Total Change</TableCell>\n            <TableCell align=\"center\">Total Quantity</TableCell>\n            <TableCell align=\"center\">Price Bought</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            .map((h) => (\n              <HoldingGroupPerformance {...h} key={h.code} />\n            ))}\n          {data.length > 5 && fillWithEmpty && emptyRows > 0 && (\n            <TableRow style={{ height: 52.8 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      {data.length > 5 && (\n        <TablePagination\n          component=\"div\"\n          rowsPerPageOptions={[5, 10, 25]}\n          count={data.length}\n          page={page}\n          rowsPerPage={rowsPerPage}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      )}\n    </TableContainer>\n  );\n}\n\nexport function HoldingGroupPerformance({\n  code,\n  change,\n  change_percent,\n  net_worth,\n  current_worth,\n  net_worth_percent,\n  price_bought,\n  total_quantity,\n}) {\n  return (\n    <TableRow>\n      <TableCell align=\"center\">\n        <Link to={`/stock/${code}`}>{code.toUpperCase()}</Link>\n      </TableCell>\n      <TableCell align=\"center\">{currencyFormatter.format(current_worth)}</TableCell>\n      <TableCell align=\"center\">\n        <span\n          className={\n            change > 0 ? 'positive' : change < 0 ? 'negative' : 'neutral'\n          }\n        >\n          {currencyFormatter.format(change)} ({change_percent}%)\n          {change > 0 ? '▴' : change < 0 ? '▾' : '-'}\n        </span>\n      </TableCell>\n      <TableCell align=\"center\">\n        <span\n          className={\n            net_worth > 0 ? 'positive' : net_worth < 0 ? 'negative' : 'neutral'\n          }\n        >\n          {currencyFormatter.format(net_worth)} ({net_worth_percent}%)\n          {net_worth > 0 ? '▴' : net_worth < 0 ? '▾' : '-'}\n        </span>\n      </TableCell>\n      <TableCell align=\"center\">{total_quantity}</TableCell>\n      <TableCell align=\"center\">\n        {currencyFormatter.format(price_bought)}\n      </TableCell>\n    </TableRow>\n  );\n}\n\nexport default IndPortfolioPerformance;\n"]},"metadata":{},"sourceType":"module"}