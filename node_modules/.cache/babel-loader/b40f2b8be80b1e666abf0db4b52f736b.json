{"ast":null,"code":"import { STOCK_LOADING, STOCK_SUCCESS, STOCK_FAILURE } from '../actions/types';\nconst initialState = {\n  isFetching: false,\n  details: {},\n  error: null\n};\nexport default function selectedStocks(state = {}, action) {\n  const newState = { ...state\n  };\n\n  if (!newState[action.meta]) {\n    newState[action.meta] = initialState;\n  }\n\n  switch (action.type) {\n    case STOCK_LOADING:\n      newState[action.meta] = { ...newState[action.meta],\n        isFetching: true\n      };\n      return newState;\n\n    case STOCK_SUCCESS:\n      newState[action.meta] = { ...newState[action.meta],\n        isFetching: false,\n        details: action.payload,\n        error: null,\n        receivedAt: Date.now()\n      };\n      return newState;\n\n    case STOCK_FAILURE:\n      newState[action.meta] = { ...newState[action.meta],\n        isFetching: false,\n        error: action.payload,\n        receivedAt: Date.now()\n      };\n      return newState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/reducers/selectedStocks.js"],"names":["STOCK_LOADING","STOCK_SUCCESS","STOCK_FAILURE","initialState","isFetching","details","error","selectedStocks","state","action","newState","meta","type","payload","receivedAt","Date","now"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,aAAvC,QAA4D,kBAA5D;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAG,EAAhC,EAAoCC,MAApC,EAA4C;AACzD,QAAMC,QAAQ,GAAG,EAAE,GAAGF;AAAL,GAAjB;;AACA,MAAI,CAACE,QAAQ,CAACD,MAAM,CAACE,IAAR,CAAb,EAA4B;AAC1BD,IAAAA,QAAQ,CAACD,MAAM,CAACE,IAAR,CAAR,GAAwBR,YAAxB;AACD;;AAED,UAAQM,MAAM,CAACG,IAAf;AACE,SAAKZ,aAAL;AACEU,MAAAA,QAAQ,CAACD,MAAM,CAACE,IAAR,CAAR,GAAwB,EAAE,GAAGD,QAAQ,CAACD,MAAM,CAACE,IAAR,CAAb;AAA4BP,QAAAA,UAAU,EAAE;AAAxC,OAAxB;AACA,aAAOM,QAAP;;AACF,SAAKT,aAAL;AACES,MAAAA,QAAQ,CAACD,MAAM,CAACE,IAAR,CAAR,GAAwB,EACtB,GAAGD,QAAQ,CAACD,MAAM,CAACE,IAAR,CADW;AAEtBP,QAAAA,UAAU,EAAE,KAFU;AAGtBC,QAAAA,OAAO,EAAEI,MAAM,CAACI,OAHM;AAItBP,QAAAA,KAAK,EAAE,IAJe;AAKtBQ,QAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AALU,OAAxB;AAOA,aAAON,QAAP;;AACF,SAAKR,aAAL;AACEQ,MAAAA,QAAQ,CAACD,MAAM,CAACE,IAAR,CAAR,GAAwB,EACtB,GAAGD,QAAQ,CAACD,MAAM,CAACE,IAAR,CADW;AAEtBP,QAAAA,UAAU,EAAE,KAFU;AAGtBE,QAAAA,KAAK,EAAEG,MAAM,CAACI,OAHQ;AAItBC,QAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAJU,OAAxB;AAMA,aAAON,QAAP;;AACF;AACE,aAAOF,KAAP;AAtBJ;AAwBD","sourcesContent":["import { STOCK_LOADING, STOCK_SUCCESS, STOCK_FAILURE } from '../actions/types';\n\nconst initialState = {\n  isFetching: false,\n  details: {},\n  error: null\n};\n\nexport default function selectedStocks(state = {}, action) {\n  const newState = { ...state };\n  if (!newState[action.meta]) {\n    newState[action.meta] = initialState;\n  }\n\n  switch (action.type) {\n    case STOCK_LOADING:\n      newState[action.meta] = { ...newState[action.meta], isFetching: true };\n      return newState;\n    case STOCK_SUCCESS:\n      newState[action.meta] = {\n        ...newState[action.meta],\n        isFetching: false,\n        details: action.payload,\n        error: null,\n        receivedAt: Date.now()\n      };\n      return newState;\n    case STOCK_FAILURE:\n      newState[action.meta] = {\n        ...newState[action.meta],\n        isFetching: false,\n        error: action.payload,\n        receivedAt: Date.now()\n      };\n      return newState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}