{"ast":null,"code":"var _jsxFileName = \"/Users/dezza/capstone-project-yushi/src/components/PortfolioPage/PortfoliosPerformance.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from 'react-router-dom';\nimport Error from '../Error';\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n/* \n  data has properties: \n    - change(pin): -148.64999999999964\n    - change_percent: \"-3.267930750206091%\"\n    - current_worth: 4400.1\n    - net_worth: 959.22\n    - prev_net_worth: 1107.97\n    - prev_worth: 4548.75\n    - portfolio_performances: []\n*/\n\nexport const currencyFormatter = new Intl.NumberFormat('en-AU', {\n  style: 'currency',\n  currency: 'AUD'\n});\n\nfunction PortfoliosPerformance({\n  isFetching,\n  data,\n  error\n}) {\n  const [bestPerforming, setBestPerforming] = React.useState(null);\n  const [worstPerforming, setWorstPerforming] = React.useState(null);\n  React.useEffect(() => {\n    const {\n      portfolio_performances\n    } = data;\n    if (!portfolio_performances) return;\n    let maxValue = -Infinity;\n    let max = null;\n    let minValue = Infinity;\n    let min = null;\n    portfolio_performances.forEach(p => {\n      if (!p.change_percent) return;\n      const percent = p.change_percent;\n\n      if (percent >= maxValue) {\n        maxValue = percent;\n        max = p;\n      }\n\n      if (percent <= minValue) {\n        minValue = percent;\n        min = p;\n      }\n    });\n    setBestPerforming(max);\n    setWorstPerforming(min);\n  }, [data]);\n  /* \n      Displays combined performance of all portfolios\n  */\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, error && React.createElement(Error, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    className: \"performance-container\",\n    direction: \"row\",\n    alignItems: \"center\",\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, isFetching && React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), data && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(PrimaryStats, Object.assign({}, data, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), data.portfolio_performances && bestPerforming && worstPerforming && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(ShareDistributionGraph, {\n    distribution: data.portfolio_performances,\n    nameKey: \"portfolio_name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Portfolios Distribution\")), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(OtherStats, {\n    bestPerforming: bestPerforming,\n    worstPerforming: worstPerforming,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }))))));\n}\n/* \n  Displays current worth, change, change_percent, net_worth\n*/\n\n\nexport function PrimaryStats({\n  current_worth,\n  change,\n  change_percent,\n  net_worth\n}) {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"AUD \", currencyFormatter.format(current_worth)), React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Total Worth\")), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: change > 0 ? 'positive' : change < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"change\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, currencyFormatter.format(change)), change_percent && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, ' ', React.createElement(\"span\", {\n    className: \"change_percent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"(\", change_percent, \"%)\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, change > 0 ? '▴' : change < 0 ? '▾' : '-')), React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Daily Change\")), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: net_worth > 0 ? 'positive' : net_worth < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"change\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, currencyFormatter.format(net_worth)), current_worth - net_worth !== 0 && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, ' ', React.createElement(\"span\", {\n    className: \"change_percent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"(\", Math.round((current_worth / (current_worth - net_worth) * 100 - 100 + Number.EPSILON) * 100) / 100, \"%)\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, net_worth > 0 ? '▴' : net_worth < 0 ? '▾' : '-')), React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Total Change\")));\n}\n/*\n  Displays worst and best performing portfolio\n*/\n\nfunction OtherStats({\n  bestPerforming,\n  worstPerforming\n}) {\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    alignItems: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, bestPerforming && React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Best Performing:\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: `/portfolio/${bestPerforming.portfolio_id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, bestPerforming.portfolio_name))), React.createElement(Grid, {\n    item: true,\n    className: bestPerforming.change > 0 ? 'positive' : bestPerforming.change < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, currencyFormatter.format(bestPerforming.change), \" (\", bestPerforming.change_percent, \"%)\", bestPerforming.change > 0 ? '▴' : bestPerforming.change < 0 ? '▾' : '-'))), worstPerforming && React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"Worst Performing:\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: `/portfolio/${worstPerforming.portfolio_id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, worstPerforming.portfolio_name))), React.createElement(Grid, {\n    item: true,\n    className: worstPerforming.change > 0 ? 'positive' : worstPerforming.change < 0 ? 'negative' : 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, currencyFormatter.format(worstPerforming.change), \" (\", worstPerforming.change_percent, \"%)\", worstPerforming.change > 0 ? '▴' : worstPerforming.change < 0 ? '▾' : '-'))));\n}\n/* \n\n  Displays distribution of portfolios\n*/\n\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\nexport function ShareDistributionGraph({\n  distribution,\n  nameKey\n}) {\n  return React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(PieChart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(Pie, {\n    data: distribution,\n    cx: \"50%\",\n    cy: \"50%\",\n    fill: \"#8884d8\",\n    dataKey: \"current_worth\",\n    nameKey: nameKey,\n    label: ({\n      percent\n    }) => `${(percent * 100).toFixed(0)}%`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, distribution.map((entry, index) => React.createElement(Cell, {\n    key: `cell-${index}`,\n    fill: COLORS[index % COLORS.length],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }))), React.createElement(Tooltip, {\n    formatter: value => currencyFormatter.format(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    verticalAlign: \"top\",\n    formatter: value => React.createElement(\"span\", {\n      className: \"subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  })));\n}\nPortfoliosPerformance.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.object.isRequired,\n  error: PropTypes.object\n};\nexport default PortfoliosPerformance;","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/components/PortfolioPage/PortfoliosPerformance.js"],"names":["React","PropTypes","Grid","CircularProgress","Link","Error","PieChart","Pie","Cell","Tooltip","ResponsiveContainer","Legend","currencyFormatter","Intl","NumberFormat","style","currency","PortfoliosPerformance","isFetching","data","error","bestPerforming","setBestPerforming","useState","worstPerforming","setWorstPerforming","useEffect","portfolio_performances","maxValue","Infinity","max","minValue","min","forEach","p","change_percent","percent","PrimaryStats","current_worth","change","net_worth","format","Math","round","Number","EPSILON","OtherStats","portfolio_id","portfolio_name","COLORS","ShareDistributionGraph","distribution","nameKey","toFixed","map","entry","index","length","value","propTypes","bool","isRequired","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from 'react-router-dom';\nimport Error from '../Error';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from 'recharts';\n\n/* \n  data has properties: \n    - change(pin): -148.64999999999964\n    - change_percent: \"-3.267930750206091%\"\n    - current_worth: 4400.1\n    - net_worth: 959.22\n    - prev_net_worth: 1107.97\n    - prev_worth: 4548.75\n    - portfolio_performances: []\n*/\n\nexport const currencyFormatter = new Intl.NumberFormat('en-AU', {\n  style: 'currency',\n  currency: 'AUD',\n});\n\nfunction PortfoliosPerformance({ isFetching, data, error }) {\n  const [bestPerforming, setBestPerforming] = React.useState(null);\n  const [worstPerforming, setWorstPerforming] = React.useState(null);\n\n  React.useEffect(() => {\n    const { portfolio_performances } = data;\n    if (!portfolio_performances) return;\n    let maxValue = -Infinity;\n    let max = null;\n    let minValue = Infinity;\n    let min = null;\n    portfolio_performances.forEach((p) => {\n      if (!p.change_percent) return;\n      const percent = p.change_percent;\n      if (percent >= maxValue) {\n        maxValue = percent;\n        max = p;\n      }\n      if (percent <= minValue) {\n        minValue = percent;\n        min = p;\n      }\n    });\n    setBestPerforming(max);\n    setWorstPerforming(min);\n  }, [data]);\n\n  /* \n      Displays combined performance of all portfolios\n  */\n  return (\n    <React.Fragment>\n      {error && <Error />}\n      <Grid\n        container\n        spacing={4}\n        className=\"performance-container\"\n        direction=\"row\"\n        alignItems=\"center\"\n        justify=\"center\"\n      >\n        {isFetching && <CircularProgress />}\n        {data && (\n          <React.Fragment>\n            <PrimaryStats {...data} />\n            {data.portfolio_performances && bestPerforming && worstPerforming && (\n              <React.Fragment>\n                <Grid item xs={12} md={5}>\n                  <ShareDistributionGraph\n                    distribution={data.portfolio_performances}\n                    nameKey=\"portfolio_name\"\n                  />\n                  <h6 className=\"subtitle\">Portfolios Distribution</h6>\n                </Grid>\n                <Grid item xs={12} md={5}>\n                  <OtherStats\n                    bestPerforming={bestPerforming}\n                    worstPerforming={worstPerforming}\n                  />\n                </Grid>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n}\n\n/* \n  Displays current worth, change, change_percent, net_worth\n*/\nexport function PrimaryStats({\n  current_worth,\n  change,\n  change_percent,\n  net_worth,\n}) {\n  return (\n    <React.Fragment>\n      <Grid item xs={12} md={4}>\n        <h1 className=\"title\">AUD {currencyFormatter.format(current_worth)}</h1>\n        <h6 className=\"subtitle\">Total Worth</h6>\n      </Grid>\n      <Grid item xs={12} sm={6} md={4}>\n        <h2\n          className={\n            change > 0 ? 'positive' : change < 0 ? 'negative' : 'neutral'\n          }\n        >\n          <span className=\"change\">{currencyFormatter.format(change)}</span>\n\n          {change_percent && (\n            <React.Fragment>\n              {' '}\n              <span className=\"change_percent\">({change_percent}%)</span>\n            </React.Fragment>\n          )}\n          <span>{change > 0 ? '▴' : change < 0 ? '▾' : '-'}</span>\n        </h2>\n        <h6 className=\"subtitle\">Daily Change</h6>\n      </Grid>\n      <Grid item xs={12} sm={6} md={4}>\n        <h2\n          className={\n            net_worth > 0 ? 'positive' : net_worth < 0 ? 'negative' : 'neutral'\n          }\n        >\n          <span className=\"change\">{currencyFormatter.format(net_worth)}</span>\n\n          {current_worth - net_worth !== 0 && (\n            <React.Fragment>\n              {' '}\n              <span className=\"change_percent\">\n                (\n                {Math.round(\n                  ((current_worth / (current_worth - net_worth)) * 100 -\n                    100 +\n                    Number.EPSILON) *\n                    100\n                ) / 100}\n                %)\n              </span>\n            </React.Fragment>\n          )}\n\n          <span>{net_worth > 0 ? '▴' : net_worth < 0 ? '▾' : '-'}</span>\n        </h2>\n        <h6 className=\"subtitle\">Total Change</h6>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\n/*\n  Displays worst and best performing portfolio\n*/\nfunction OtherStats({ bestPerforming, worstPerforming }) {\n  return (\n    <Grid item xs={12} container alignItems=\"flex-end\">\n      {bestPerforming && (\n        <Grid item xs={12} container spacing={1} alignItems=\"flex-end\">\n          <Grid item>\n            <h6 className=\"subtitle\">Best Performing:</h6>\n          </Grid>\n          <Grid item>\n            <Link to={`/portfolio/${bestPerforming.portfolio_id}`}>\n              <h6>{bestPerforming.portfolio_name}</h6>\n            </Link>\n          </Grid>\n          <Grid\n            item\n            className={\n              bestPerforming.change > 0\n                ? 'positive'\n                : bestPerforming.change < 0\n                ? 'negative'\n                : 'neutral'\n            }\n          >\n            <h6>\n              {currencyFormatter.format(bestPerforming.change)} (\n              {bestPerforming.change_percent}%)\n              {bestPerforming.change > 0\n                ? '▴'\n                : bestPerforming.change < 0\n                ? '▾'\n                : '-'}\n            </h6>\n          </Grid>\n        </Grid>\n      )}\n      {worstPerforming && (\n        <Grid item xs={12} container spacing={1} alignItems=\"flex-end\">\n          <Grid item>\n            <h6 className=\"subtitle\">Worst Performing:</h6>\n          </Grid>\n          <Grid item>\n            <Link to={`/portfolio/${worstPerforming.portfolio_id}`}>\n              <h6>{worstPerforming.portfolio_name}</h6>\n            </Link>\n          </Grid>\n          <Grid\n            item\n            className={\n              worstPerforming.change > 0\n                ? 'positive'\n                : worstPerforming.change < 0\n                ? 'negative'\n                : 'neutral'\n            }\n          >\n            <h6>\n              {currencyFormatter.format(worstPerforming.change)} (\n              {worstPerforming.change_percent}%)\n              {worstPerforming.change > 0\n                ? '▴'\n                : worstPerforming.change < 0\n                ? '▾'\n                : '-'}\n            </h6>\n          </Grid>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n\n/* \n\n  Displays distribution of portfolios\n*/\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nexport function ShareDistributionGraph({ distribution, nameKey }) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <PieChart>\n        <Pie\n          data={distribution}\n          cx=\"50%\"\n          cy=\"50%\"\n          fill=\"#8884d8\"\n          dataKey=\"current_worth\"\n          nameKey={nameKey}\n          label={({ percent }) => `${(percent * 100).toFixed(0)}%`}\n        >\n          {distribution.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n          ))}\n        </Pie>\n        <Tooltip formatter={(value) => currencyFormatter.format(value)} />\n        <Legend\n          verticalAlign=\"top\"\n          formatter={(value) => <span className=\"subtitle\">{value}</span>}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n\nPortfoliosPerformance.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.object.isRequired,\n  error: PropTypes.object,\n};\n\nexport default PortfoliosPerformance;\n"]},"metadata":{},"sourceType":"module"}