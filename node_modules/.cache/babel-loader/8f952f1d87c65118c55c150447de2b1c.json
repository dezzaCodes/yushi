{"ast":null,"code":"var _jsxFileName = \"/Users/dezza/capstone-project-yushi/src/components/StockPage/StockHistoryGraph.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Brush, ResponsiveContainer } from 'recharts';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Error from '../Error'; // CSS styles for graph lines\n\nconst graphLineColours = {\n  open: '#dbb659',\n  close: '#5964db',\n  low: '#db5960',\n  high: '#82ca9d'\n};\nconst useStyles = makeStyles(theme => ({\n  container: {\n    margin: theme.spacing(3)\n  },\n  graphOptions: {\n    marginLeft: theme.spacing(3)\n  },\n  progress: {\n    width: '250px'\n  }\n}));\nconst dateFormat = 'DD/MM/YY';\n\nconst monthDayTickFormatter = tick => {\n  return moment(tick, dateFormat).format('DD/MM');\n};\n\nconst YearTickFormatter = tick => {\n  return moment(tick, dateFormat).format('YYYY');\n};\n\nfunction StockHistoryGraph({\n  code\n}) {\n  const classes = useStyles();\n  const [stockHistory, setStockHistory] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [propDisplay, setPropDisplay] = React.useState({\n    open: false,\n    close: false,\n    low: true,\n    high: true\n  });\n\n  async function fetchData(code) {\n    try {\n      let {\n        data: {\n          history\n        }\n      } = await axios.get(`/stocks/${code}/history`);\n\n      if (!history) {\n        setError('Could not load graph');\n        return;\n      } // Formating data\n\n\n      history = history.map(d => {\n        const date = moment(d.date, 'YYYY-MM-DD').format(dateFormat);\n\n        if (d.daily_change > 0) {\n          return { ...d,\n            date,\n            positive: d.daily_change\n          };\n        } else {\n          return { ...d,\n            date,\n            negative: d.daily_change\n          };\n        }\n      });\n      history.sort((a, b) => moment(a.date, dateFormat) - moment(b.date, dateFormat));\n      setStockHistory(history);\n      setError(null);\n    } catch (error) {\n      if (error.response) {\n        setError({\n          status: error.response.status,\n          message: error.response.data.error\n        });\n      } else if (error.request) {\n        setError({\n          status: 400,\n          message: 'Request sent but no response given.'\n        });\n      } else {\n        setError({\n          status: 500,\n          message: error.message\n        });\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData(code);\n  }, [code]);\n\n  const handlePropDisplay = e => {\n    const d = { ...propDisplay\n    };\n    d[e.target.value] = e.target.checked;\n    setPropDisplay(d);\n  };\n\n  if (error) return React.createElement(Error, {\n    message: \"Could not load graph\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  });\n\n  if (!stockHistory) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: classes.progress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, `loading graph for ${code}...`), React.createElement(LinearProgress, {\n      className: classes.progress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  } // Display Graph\n\n\n  return React.createElement(\"div\", {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    className: classes.graphOptions,\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, Object.keys(propDisplay).map(k => React.createElement(FormControlLabel, {\n    key: k,\n    control: React.createElement(Checkbox, {\n      checked: propDisplay[k],\n      onChange: handlePropDisplay,\n      name: \"propertyDisplay\",\n      color: \"primary\",\n      id: k,\n      value: k,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }),\n    label: k,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }))), React.createElement(ResponsiveContainer, {\n    width: \"80%\",\n    height: 400,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    data: stockHistory,\n    margin: {\n      top: 30,\n      bottom: 30,\n      left: 30,\n      right: 90\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    vertical: false,\n    strokeDasharray: \"3 3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"date\",\n    tickFormatter: monthDayTickFormatter,\n    minTickGap: 30,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"date\",\n    tickLine: false,\n    axisLine: false,\n    tickFormatter: YearTickFormatter,\n    xAxisId: \"year\",\n    minTickGap: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    domain: ['auto', 'auto'],\n    label: {\n      value: 'Price ($)',\n      angle: -90,\n      position: 'insideLeft'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), Object.entries(propDisplay).map(([k, v]) => v && React.createElement(Line, {\n    type: \"linear\",\n    dataKey: k,\n    dot: false,\n    stroke: graphLineColours[k],\n    key: k,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  })), React.createElement(Brush, {\n    dataKey: \"date\",\n    height: 30,\n    startIndex: stockHistory.length - 10 > 0 ? stockHistory.length - 10 : 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }))));\n}\n\nStockHistoryGraph.propTypes = {\n  code: PropTypes.string.isRequired\n};\nexport default StockHistoryGraph;","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/components/StockPage/StockHistoryGraph.js"],"names":["React","PropTypes","axios","moment","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Brush","ResponsiveContainer","makeStyles","FormGroup","FormControlLabel","Checkbox","LinearProgress","Error","graphLineColours","open","close","low","high","useStyles","theme","container","margin","spacing","graphOptions","marginLeft","progress","width","dateFormat","monthDayTickFormatter","tick","format","YearTickFormatter","StockHistoryGraph","code","classes","stockHistory","setStockHistory","useState","error","setError","propDisplay","setPropDisplay","fetchData","data","history","get","map","d","date","daily_change","positive","negative","sort","a","b","response","status","message","request","useEffect","handlePropDisplay","e","target","value","checked","Object","keys","k","top","bottom","left","right","angle","position","entries","v","length","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport moment from 'moment';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Brush,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport Error from '../Error';\n\n// CSS styles for graph lines\nconst graphLineColours = {\n  open: '#dbb659',\n  close: '#5964db',\n  low: '#db5960',\n  high: '#82ca9d',\n};\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: theme.spacing(3),\n  },\n  graphOptions: {\n    marginLeft: theme.spacing(3),\n  },\n  progress: {\n    width: '250px',\n  },\n}));\n\nconst dateFormat = 'DD/MM/YY';\nconst monthDayTickFormatter = (tick) => {\n  return moment(tick, dateFormat).format('DD/MM');\n};\n\nconst YearTickFormatter = (tick) => {\n  return moment(tick, dateFormat).format('YYYY');\n};\n\nfunction StockHistoryGraph({ code }) {\n  const classes = useStyles();\n  const [stockHistory, setStockHistory] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [propDisplay, setPropDisplay] = React.useState({\n    open: false,\n    close: false,\n    low: true,\n    high: true,\n  });\n\n  async function fetchData(code) {\n    try {\n      let {\n        data: { history },\n      } = await axios.get(`/stocks/${code}/history`);\n      if (!history) {\n        setError('Could not load graph');\n        return;\n      }\n\n      // Formating data\n      history = history.map((d) => {\n        const date = moment(d.date, 'YYYY-MM-DD').format(dateFormat);\n        if (d.daily_change > 0) {\n          return { ...d, date, positive: d.daily_change };\n        } else {\n          return { ...d, date, negative: d.daily_change };\n        }\n      });\n\n      history.sort(\n        (a, b) => moment(a.date, dateFormat) - moment(b.date, dateFormat)\n      );\n      setStockHistory(history);\n      setError(null);\n    } catch (error) {\n      if (error.response) {\n        setError({\n          status: error.response.status,\n          message: error.response.data.error,\n        });\n      } else if (error.request) {\n        setError({\n          status: 400,\n          message: 'Request sent but no response given.',\n        });\n      } else {\n        setError({\n          status: 500,\n          message: error.message,\n        });\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData(code);\n  }, [code]);\n\n  const handlePropDisplay = (e) => {\n    const d = { ...propDisplay };\n    d[e.target.value] = e.target.checked;\n    setPropDisplay(d);\n  };\n\n  if (error) return <Error message=\"Could not load graph\" />;\n  if (!stockHistory) {\n    return (\n      <React.Fragment>\n        <p className={classes.progress}>{`loading graph for ${code}...`}</p>\n        <LinearProgress className={classes.progress} />\n      </React.Fragment>\n    );\n  }\n\n  // Display Graph\n  return (\n    <div className={classes.container}>\n      <FormGroup className={classes.graphOptions} row>\n        {Object.keys(propDisplay).map((k) => (\n          <FormControlLabel\n            key={k}\n            control={\n              <Checkbox\n                checked={propDisplay[k]}\n                onChange={handlePropDisplay}\n                name=\"propertyDisplay\"\n                color=\"primary\"\n                id={k}\n                value={k}\n              />\n            }\n            label={k}\n          />\n        ))}\n      </FormGroup>\n      <ResponsiveContainer width=\"80%\" height={400}>\n        <LineChart\n          data={stockHistory}\n          margin={{ top: 30, bottom: 30, left: 30, right: 90 }}\n        >\n          <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"date\"\n            tickFormatter={monthDayTickFormatter}\n            minTickGap={30}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tickLine={false}\n            axisLine={false}\n            tickFormatter={YearTickFormatter}\n            xAxisId=\"year\"\n            minTickGap={300}\n          />\n          <YAxis\n            domain={['auto', 'auto']}\n            label={{ value: 'Price ($)', angle: -90, position: 'insideLeft' }}\n          />\n          <Tooltip />\n          <Legend />\n          {Object.entries(propDisplay).map(\n            ([k, v]) =>\n              v && (\n                <Line\n                  type=\"linear\"\n                  dataKey={k}\n                  dot={false}\n                  stroke={graphLineColours[k]}\n                  key={k}\n                />\n              )\n          )}\n          <Brush\n            dataKey=\"date\"\n            height={30}\n            startIndex={\n              stockHistory.length - 10 > 0 ? stockHistory.length - 10 : 0\n            }\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nStockHistoryGraph.propTypes = {\n  code: PropTypes.string.isRequired,\n};\n\nexport default StockHistoryGraph;\n"]},"metadata":{},"sourceType":"module"}