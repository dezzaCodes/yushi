{"ast":null,"code":"var _jsxFileName = \"/Users/dezza/capstone-project-yushi/src/components/PortfolioPage/Portfolios.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport { CircularProgress } from '@material-ui/core';\nimport { fetchPortfolios, addNewPortfolio, deletePortfolio, fetchPortfoliosPerformance } from '../../actions/portfolios';\nimport Error from '../Error';\nimport PortfolioList from './PortfolioList';\nimport PortfolioDetail from './PortfolioDetail';\nimport PortfoliosPerformance from './PortfoliosPerformance';\n\nfunction Alert(props) {\n  return React.createElement(MuiAlert, Object.assign({\n    elevation: 6,\n    variant: \"filled\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n}\n\nclass Portfolios extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = event => {\n      this.setState({\n        textField: event.target.value\n      });\n    };\n\n    this.handleAddPortfolio = event => {\n      event.preventDefault();\n      this.props.dispatch(addNewPortfolio(this.state.textField));\n      this.setState({ ...this.state,\n        textField: ''\n      });\n    };\n\n    this.state = {\n      textField: '',\n      snackbarOpen: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dispatch,\n      portfolioID\n    } = this.props;\n    dispatch(fetchPortfolios());\n    dispatch(fetchPortfoliosPerformance());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.confirmation && this.props.confirmation !== prevProps.confirmation || this.props.confirmationError && this.props.confirmationError !== prevProps.confirmationError) {\n      this.setState({ ...this.state,\n        snackbarOpen: true\n      });\n    }\n\n    if (this.props.data.length !== prevProps.data.length) {\n      this.props.dispatch(fetchPortfoliosPerformance());\n    }\n  }\n\n  handleRemovePortfolio(event, portfolio) {\n    this.props.dispatch(deletePortfolio(portfolio));\n  }\n\n  handleSnackBarClose() {\n    this.setState({ ...this.state,\n      snackbarOpen: false\n    });\n  }\n\n  render() {\n    const {\n      isFetching,\n      error,\n      data,\n      confirmation,\n      confirmationError,\n      portfolioID,\n      dispatch,\n      processingAdd\n    } = this.props; // Load individual portfolio\n\n    if (portfolioID) {\n      const portfolio = data.find(p => p.id === portfolioID); // if portfolio doesnt exist, return error\n\n      if (!portfolio) {\n        return React.createElement(Container, {\n          maxWidth: \"lg\",\n          style: {\n            margin: '2rem auto'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(Error, {\n          status: 404,\n          message: `Portfolio with id ${portfolioID} not found`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }));\n      } // load portfolio details\n\n\n      return React.createElement(Container, {\n        maxWidth: \"lg\",\n        style: {\n          margin: '2rem auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, isFetching ? React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }) : error ? React.createElement(Error, Object.assign({}, error, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })) : React.createElement(PortfolioDetail, Object.assign({}, portfolio, {\n        dispatch: dispatch,\n        dayPerformance: this.props.dayPerformance,\n        historicalPerformance: this.props.historicalPerformance,\n        processingAdd: processingAdd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }))), (confirmation || confirmationError) && React.createElement(Snackbar, {\n        open: this.state.snackbarOpen,\n        autoHideDuration: 5000,\n        onClose: this.handleSnackBarClose.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        onClose: this.handleSnackBarClose.bind(this),\n        severity: confirmation ? 'success' : 'error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, confirmation ? confirmation : confirmationError))));\n    } // Show portfolio list\n\n\n    return React.createElement(Container, {\n      maxWidth: \"lg\",\n      style: {\n        margin: '2rem auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, isFetching ? React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })) : error ? React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Error, Object.assign({}, error, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }))) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Portfolios\"), React.createElement(PortfoliosPerformance, Object.assign({}, this.props.dayPerformance, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      className: \"portfolio\",\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: this.handleAddPortfolio,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"portfolio\",\n      label: \"Portfolio name\",\n      value: this.state.textField,\n      onChange: this.handleOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disableElevation: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, processingAdd && React.createElement(CircularProgress, {\n      color: \"inherit\",\n      size: \"1rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"Add Portfolio\"))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(PortfolioList, Object.assign({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }))), (confirmation || confirmationError) && React.createElement(Snackbar, {\n      open: this.state.snackbarOpen,\n      autoHideDuration: 5000,\n      onClose: this.handleSnackBarClose.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      onClose: this.handleSnackBarClose.bind(this),\n      severity: confirmation ? 'success' : 'error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, confirmation ? confirmation : confirmationError)))));\n  }\n\n}\n\nPortfolios.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  error: PropTypes.object,\n  confirmation: PropTypes.string,\n  confirmationError: PropTypes.string,\n  portfolioID: PropTypes.number,\n  dayPerformance: PropTypes.object.isRequired,\n  historicalPerformance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    portfolios\n  } = state;\n  const {\n    isFetching,\n    data,\n    error,\n    receivedAt,\n    confirmation,\n    confirmationError,\n    dayPerformance,\n    historicalPerformance,\n    processingAdd\n  } = portfolios;\n  return {\n    isFetching,\n    data,\n    error,\n    receivedAt,\n    confirmation,\n    confirmationError,\n    dayPerformance,\n    historicalPerformance,\n    processingAdd\n  };\n};\n\nexport default connect(mapStateToProps)(Portfolios);","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/components/PortfolioPage/Portfolios.js"],"names":["React","Component","PropTypes","connect","Button","TextField","Snackbar","MuiAlert","Grid","Container","CircularProgress","fetchPortfolios","addNewPortfolio","deletePortfolio","fetchPortfoliosPerformance","Error","PortfolioList","PortfolioDetail","PortfoliosPerformance","Alert","props","Portfolios","constructor","handleOnChange","event","setState","textField","target","value","handleAddPortfolio","preventDefault","dispatch","state","snackbarOpen","componentDidMount","portfolioID","componentDidUpdate","prevProps","confirmation","confirmationError","data","length","handleRemovePortfolio","portfolio","handleSnackBarClose","render","isFetching","error","processingAdd","find","p","id","margin","dayPerformance","historicalPerformance","bind","propTypes","bool","isRequired","array","func","object","string","number","mapStateToProps","portfolios","receivedAt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport { CircularProgress } from '@material-ui/core';\n\nimport {\n  fetchPortfolios,\n  addNewPortfolio,\n  deletePortfolio,\n  fetchPortfoliosPerformance,\n} from '../../actions/portfolios';\nimport Error from '../Error';\nimport PortfolioList from './PortfolioList';\nimport PortfolioDetail from './PortfolioDetail';\nimport PortfoliosPerformance from './PortfoliosPerformance';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nclass Portfolios extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { textField: '', snackbarOpen: false };\n  }\n\n  componentDidMount() {\n    const { dispatch, portfolioID } = this.props;\n    dispatch(fetchPortfolios());\n    dispatch(fetchPortfoliosPerformance());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      (this.props.confirmation &&\n        this.props.confirmation !== prevProps.confirmation) ||\n      (this.props.confirmationError &&\n        this.props.confirmationError !== prevProps.confirmationError)\n    ) {\n      this.setState({ ...this.state, snackbarOpen: true });\n    }\n    if (this.props.data.length !== prevProps.data.length) {\n      this.props.dispatch(fetchPortfoliosPerformance());\n    }\n  }\n\n  handleOnChange = (event) => {\n    this.setState({ textField: event.target.value });\n  };\n\n  handleAddPortfolio = (event) => {\n    event.preventDefault();\n\n    this.props.dispatch(addNewPortfolio(this.state.textField));\n    this.setState({ ...this.state, textField: '' });\n  };\n\n  handleRemovePortfolio(event, portfolio) {\n    this.props.dispatch(deletePortfolio(portfolio));\n  }\n\n  handleSnackBarClose() {\n    this.setState({ ...this.state, snackbarOpen: false });\n  }\n\n  render() {\n    const {\n      isFetching,\n      error,\n      data,\n      confirmation,\n      confirmationError,\n      portfolioID,\n      dispatch,\n      processingAdd,\n    } = this.props;\n\n    // Load individual portfolio\n    if (portfolioID) {\n      const portfolio = data.find((p) => p.id === portfolioID);\n\n      // if portfolio doesnt exist, return error\n      if (!portfolio) {\n        return (\n          <Container maxWidth=\"lg\" style={{ margin: '2rem auto' }}>\n            <Error\n              status={404}\n              message={`Portfolio with id ${portfolioID} not found`}\n            />\n          </Container>\n        );\n      }\n\n      // load portfolio details\n      return (\n        <Container maxWidth=\"lg\" style={{ margin: '2rem auto' }}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              {isFetching ? (\n                <CircularProgress />\n              ) : error ? (\n                <Error {...error} />\n              ) : (\n                <PortfolioDetail\n                  {...portfolio}\n                  dispatch={dispatch}\n                  dayPerformance={this.props.dayPerformance}\n                  historicalPerformance={this.props.historicalPerformance}\n                  processingAdd={processingAdd}\n                />\n              )}\n            </Grid>\n            {(confirmation || confirmationError) && (\n              <Snackbar\n                open={this.state.snackbarOpen}\n                autoHideDuration={5000}\n                onClose={this.handleSnackBarClose.bind(this)}\n              >\n                <Alert\n                  onClose={this.handleSnackBarClose.bind(this)}\n                  severity={confirmation ? 'success' : 'error'}\n                >\n                  {confirmation ? confirmation : confirmationError}\n                </Alert>\n              </Snackbar>\n            )}\n          </Grid>\n        </Container>\n      );\n    }\n\n    // Show portfolio list\n    return (\n      <Container maxWidth=\"lg\" style={{ margin: '2rem auto' }}>\n        <Grid container spacing={3}>\n          {isFetching ? (\n            <Grid item xs={12}>\n              <CircularProgress />\n            </Grid>\n          ) : error ? (\n            <Grid item xs={12}>\n              <Error {...error} />\n            </Grid>\n          ) : (\n            <React.Fragment>\n              <Grid item xs={12}>\n                <h2 className=\"title\">Portfolios</h2>\n                <PortfoliosPerformance {...this.props.dayPerformance} />\n                <form\n                  className=\"portfolio\"\n                  noValidate\n                  autoComplete=\"off\"\n                  onSubmit={this.handleAddPortfolio}\n                >\n                  <TextField\n                    id=\"portfolio\"\n                    label=\"Portfolio name\"\n                    value={this.state.textField}\n                    onChange={this.handleOnChange}\n                  />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disableElevation\n                    type=\"submit\"\n                  >\n                    {processingAdd && (\n                      <CircularProgress color=\"inherit\" size=\"1rem\" />\n                    )}\n                    Add Portfolio\n                  </Button>\n                </form>\n              </Grid>\n              <Grid item xs={12}>\n                <PortfolioList {...this.props} />\n              </Grid>\n\n              {(confirmation || confirmationError) && (\n                <Snackbar\n                  open={this.state.snackbarOpen}\n                  autoHideDuration={5000}\n                  onClose={this.handleSnackBarClose.bind(this)}\n                >\n                  <Alert\n                    onClose={this.handleSnackBarClose.bind(this)}\n                    severity={confirmation ? 'success' : 'error'}\n                  >\n                    {confirmation ? confirmation : confirmationError}\n                  </Alert>\n                </Snackbar>\n              )}\n            </React.Fragment>\n          )}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nPortfolios.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  error: PropTypes.object,\n  confirmation: PropTypes.string,\n  confirmationError: PropTypes.string,\n  portfolioID: PropTypes.number,\n  dayPerformance: PropTypes.object.isRequired,\n  historicalPerformance: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  const { portfolios } = state;\n  const {\n    isFetching,\n    data,\n    error,\n    receivedAt,\n    confirmation,\n    confirmationError,\n    dayPerformance,\n    historicalPerformance,\n    processingAdd,\n  } = portfolios;\n  return {\n    isFetching,\n    data,\n    error,\n    receivedAt,\n    confirmation,\n    confirmationError,\n    dayPerformance,\n    historicalPerformance,\n    processingAdd,\n  };\n};\n\nexport default connect(mapStateToProps)(Portfolios);\n"]},"metadata":{},"sourceType":"module"}