{"ast":null,"code":"import axios from 'axios';\nimport { STOCK_LOADING, STOCK_SUCCESS, STOCK_FAILURE } from './types';\nexport const loadStockRequest = stockCode => {\n  return {\n    type: STOCK_LOADING,\n    payload: stockCode,\n    meta: stockCode\n  };\n};\nexport const loadStockSuccess = (res, stockCode) => {\n  const {\n    data: {\n      stock\n    }\n  } = res;\n  return {\n    type: STOCK_SUCCESS,\n    payload: stock,\n    error: false,\n    meta: stockCode\n  };\n};\nexport const loadStockFailure = (err, stockCode) => {\n  let status, data;\n\n  if (err.data.error) {\n    data = err.data.error;\n    status = err.status;\n  } else {\n    status = err.status;\n    data = err.data;\n  }\n\n  return {\n    type: STOCK_FAILURE,\n    payload: {\n      status,\n      message: data\n    },\n    error: true,\n    meta: stockCode\n  };\n};\nexport const fetchStockDetails = stockCode => {\n  return function (dispatch) {\n    dispatch(loadStockRequest(stockCode));\n    return axios.get(`/stocks/${stockCode}`).then(res => dispatch(loadStockSuccess(res, stockCode))).catch(err => dispatch(loadStockFailure(err.response, stockCode)));\n  };\n};\n\nfunction shouldFetchStockDetails(stockState) {\n  if (!stockState) return true;\n  const {\n    details,\n    isFetching,\n    error,\n    receivedAt\n  } = stockState;\n\n  if (error === null && Object.keys(details).length === 0) {\n    return true;\n  } else if (isFetching) {\n    return false;\n  } else if (receivedAt) {\n    const diff = Date.now() - receivedAt;\n    return diff > 86400000;\n  }\n\n  return false;\n}\n\nexport function fetchStockDetailsIfNeeded(stockCode) {\n  return (dispatch, getState) => {\n    const {\n      selectedStocks\n    } = getState();\n\n    if (shouldFetchStockDetails(selectedStocks[stockCode])) {\n      return dispatch(fetchStockDetails(stockCode));\n    } else {\n      return Promise.resolve();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/dezza/capstone-project-yushi/src/actions/selectedStocks.js"],"names":["axios","STOCK_LOADING","STOCK_SUCCESS","STOCK_FAILURE","loadStockRequest","stockCode","type","payload","meta","loadStockSuccess","res","data","stock","error","loadStockFailure","err","status","message","fetchStockDetails","dispatch","get","then","catch","response","shouldFetchStockDetails","stockState","details","isFetching","receivedAt","Object","keys","length","diff","Date","now","fetchStockDetailsIfNeeded","getState","selectedStocks","Promise","resolve"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { STOCK_LOADING, STOCK_SUCCESS, STOCK_FAILURE } from './types';\n\nexport const loadStockRequest = stockCode => {\n  return { type: STOCK_LOADING, payload: stockCode, meta: stockCode };\n};\n\nexport const loadStockSuccess = (res, stockCode) => {\n  const {\n    data: { stock }\n  } = res;\n  return {\n    type: STOCK_SUCCESS,\n    payload: stock,\n    error: false,\n    meta: stockCode\n  };\n};\n\nexport const loadStockFailure = (err, stockCode) => {\n  let status, data;\n  if (err.data.error) {\n    data = err.data.error;\n    status = err.status;\n  } else {\n    status = err.status;\n    data = err.data;\n  }\n\n  return {\n    type: STOCK_FAILURE,\n    payload: { status, message: data },\n    error: true,\n    meta: stockCode\n  };\n};\n\nexport const fetchStockDetails = stockCode => {\n  return function(dispatch) {\n    dispatch(loadStockRequest(stockCode));\n\n    return axios\n      .get(`/stocks/${stockCode}`)\n      .then(res => dispatch(loadStockSuccess(res, stockCode)))\n      .catch(err => dispatch(loadStockFailure(err.response, stockCode)));\n  };\n};\n\nfunction shouldFetchStockDetails(stockState) {\n  if (!stockState) return true;\n  const { details, isFetching, error, receivedAt } = stockState;\n  if (error === null && Object.keys(details).length === 0) {\n    return true;\n  } else if (isFetching) {\n    return false;\n  } else if (receivedAt) {\n    const diff = Date.now() - receivedAt;\n    return diff > 86400000;\n  }\n  return false;\n}\n\nexport function fetchStockDetailsIfNeeded(stockCode) {\n  return (dispatch, getState) => {\n    const { selectedStocks } = getState();\n    if (shouldFetchStockDetails(selectedStocks[stockCode])) {\n      return dispatch(fetchStockDetails(stockCode));\n    } else {\n      return Promise.resolve();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}